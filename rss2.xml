<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>这波又白给</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>在天堂和地域之间，没有我选择的权利，只有别人选择我的命运！</description>
    <pubDate>Fri, 17 Mar 2023 12:43:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Html渲染原理</title>
      <link>http://example.com/2023/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90html%20%E8%BF%87%E7%A8%8B/</link>
      <guid>http://example.com/2023/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90html%20%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Fri, 17 Mar 2023 11:10:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;浏览器解析html-过程&quot;&gt;&lt;a href=&quot;#浏览器解析html-过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析html 过程&quot;&gt;&lt;/a&gt;浏览器解析html 过程&lt;/h1&gt;&lt;h2 id=&quot;前-言&quot;&gt;&lt;a href=&quot;#前-言&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="浏览器解析html-过程"><a href="#浏览器解析html-过程" class="headerlink" title="浏览器解析html 过程"></a>浏览器解析html 过程</h1><h2 id="前-言"><a href="#前-言" class="headerlink" title="前 言"></a>前 言</h2><blockquote><p><strong>当我们在浏览器中加载一个html文件时，浏览器是如何解析渲染到页面上的呢？</strong></p><p><strong>使用浏览器访问一个链接（URL），实际上就是下载、解析和显示 HTML 文档的过程。而网页（webPage）= 内容（html） + 表现（css） + 行为（javascript）</strong></p></blockquote><h2 id="html基本结构"><a href="#html基本结构" class="headerlink" title="html基本结构"></a>html基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--头部元素的容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 显示实际内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="html执行顺序"><a href="#html执行顺序" class="headerlink" title="html执行顺序"></a><strong>html执行顺序</strong></h2><blockquote><p><strong>html执行顺序是自上而下的。</strong></p><p><strong><code>&lt;!DOCTYPE html&gt;</code>:告诉了web浏览器案我们页面使用了哪个版本的HTML进行编写的指令。</strong></p><p><strong><code>&lt;head&gt;</code>:该标签是所有头部元素的容器, 绝大多数头部标签的内容不会显示给读者。</strong></p><p><strong>该标签下所包含的部分可加入的标签有<base>, <link>, <meta>, <script>, <style>, 以及 <title></strong></p><p><strong>其中<code>&lt;link&gt;</code> 使用外联样式表引入Css文件。</strong></p><p><strong><code>body</code>:用于定义文档的主体, 包含了文档的所有内容。</strong></p><p><strong>该标签支持 html 的全局属性和事件属性.</strong></p><p><strong>而JavaScript文件我们一般在<code>&lt;body&gt;</code>标签结束后使用<code>&lt;script&gt;</code>标签引入。</strong></p></blockquote><h2 id="DOM树与CSSOM树"><a href="#DOM树与CSSOM树" class="headerlink" title="DOM树与CSSOM树"></a><strong>DOM树与CSSOM树</strong></h2><blockquote><p><strong>浏览器实际上将html解析成了树形的数据结构，简称DOM，我们也叫它DOM树</strong></p></blockquote><p><strong><img src="/./img/DOMTree.png" alt="DOM树"></strong></p><blockquote><p><strong>在浏览器构建 DOM 树的同时，如果样式也加载完成了，那么 CSSOM 树也在同步地构建。CSS 树和 DOM 类</strong><br><strong>似，它的树形结构会记录所有样式的信息</strong></p><p><strong>因为css是对各个html元素样式进行改变，所以，我们可以将CSSOM的树模型看成这样：</strong></p></blockquote><p><strong><img src="/./img/CSSOMTree.png" alt="CSSOM树模型"></strong></p><blockquote><p><strong>1、这棵树的结构只是一个示意图，并不是浏览器构造 CSSOM 树的真实数据结构，各个浏览器实现 CSSOM 树的方式也不完全相同</strong></p><p><strong>2、CSSOM 树和 DOM 树是独立的两个数据结构，它们没有一一对应的关系。DOM 树描述的是 HTML 标签的层级关系，CSSOM 树描述的是选择器之间的层级关系</strong></p><p><strong>3、CSS 中存在样式继承机制，有些属性在父节点设置后，其后代节点都会具备这个样式。比如在 html 上设置一个 “color: red” ，那页面的所有标签都会继承这个属性。当然不是所有标签和属性都是可以继承的，比如 border 这种属性就是不可继承的。如果 border 可继承，那么在一个父元素里设置了以后，所有子元素都会有个边框，这显然是不合理的。所以在大部分情况下，通过这种推理，就能知道哪些样式可以继承，哪些样式不可以继承</strong></p><p><strong>注意<code>CSS</code>不会阻塞<code>DOM</code>的解析，但会阻塞<code>DOM</code>的渲染</strong></p></blockquote><h2 id="Render树"><a href="#Render树" class="headerlink" title="Render树"></a><strong>Render树</strong></h2><p><strong><img src="/./img/r.png" alt="Render树"></strong></p><blockquote><p><strong>浏览器在构造DOM树的同时也在构造着另一棵树-Render Tree,与DOM树相对应暂且叫它Render树。我们知道DOM树为javascript提供了一些列的访问接口（DOM API），但这棵树是不对外的。它的主要作用就是把HTML按照一定的布局与样式显示出来，用到了CSS的相关知识。从MVC的角度来说，可以将render树看成是V，dom树看成是M，C则是具体的调度者，比HTMLDocumentParser等。</strong></p></blockquote></script></strong></p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://example.com/tags/Html/">Html</category>
      
      <category domain="http://example.com/tags/Css/">Css</category>
      
      
      <comments>http://example.com/2023/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90html%20%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git基本使用及常用命令</title>
      <link>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <guid>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Thu, 16 Mar 2023 12:33:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Git学习笔记&quot;&gt;&lt;a href=&quot;#Git学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Git学习笔记&quot;&gt;&lt;/a&gt;Git学习笔记&lt;/h1&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>提交分三步</p><p>第一 <code>git add .</code> 修改添加到缓存区</p><p>第二 <code>git commit -m &#39;修改内容说明&#39;</code>提交缓存区文件</p><p>第三 <code>git push</code> 向远程仓库推送。</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><blockquote><p><code>git config</code> 命令用于获取并设置存储库或全局选项（一般刚下载的git需要配置用户名和用户邮箱，以获取获取代码的权限）</p><p>可以通过<code>git config</code>来配置用户名和邮箱地址，便于我们将代码提交到远程仓库</p><p><code>git config --global user.name &#39;你的用户名&#39;</code><br><code>git config --global user.email &#39;你的邮箱&#39;</code></p><p>如果去掉 –global 参数只对当前仓库有效.</p></blockquote><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><blockquote><p>命令格式：<code>git init</code></p><p><code>git init</code>: 用于初始化厂库</p><p>使用<code>git init</code> 命令后，会在命令输入的根目录下生成一个<code>.git</code>目录，该目录包括了一些资源数据。</p><p>也可以 <code>git init  文件名或路径</code> 在指定路径目录下初始化厂库、生成<code>.git</code>文件。 </p></blockquote><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><blockquote><p>命令格式：<code>git clone</code></p><p><code>git clone</code> ：将远程仓库的资源克隆到本地</p><p><code>git clone &lt;url&gt; [directory]</code></p><p>此命令的两个参数 <code>url</code>为仓库地址，<code>directory</code>为本地路径。<code>directory</code>可以省略，则默认会克隆<code>url</code>地址下的仓库到当前命令行输入路径。</p></blockquote><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><blockquote><p>命令格式：<code>git add [file1] [file2] ...</code></p><p>添加文件到暂存区：<br><code>git add file</code></p><p>添加指定目录到暂存区，包括子目录：</p><p><code>git add [dir]</code></p><p>常用命令为添加当前目录下的所有文件到暂存区：</p><p><code>git add .</code></p><p>当然我们也可以指定某一类文件，如将java文件添加到缓存中，可以使用如下命令：</p><p><code>git add *.java</code></p></blockquote><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><blockquote><p>命令格式：<code>git commit -m [message]</code></p><p><code>[message]</code> 可以是一些备注信息。</p><p><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交:</p><p><code>git commit -a</code></p></blockquote><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><p>将本地分支的更新，推送到远程仓库中。</p><p>实例：<code>git push origin newbranch:newbranch </code></p><p>如果本地分支名与远程分支名相同，则可以省略 <code>：&lt;远程分支名&gt;</code></p><p>如果本地版本与远程版本有差异，但又要强制推送可以使用 –force 参数：</p><p><code>git push --force origin master</code></p><p>删除主机的分支可以使用 –delete 参数，以下命令表示删除 origin 主机的 master 分支:</p><p><code>git push origin --delete master</code></p></blockquote><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><blockquote><p>命令格式：<code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p><code>git pull</code> 其实就是 <code>git fetch</code> 和 <code>git merge FETCH_HEAD</code> 的简写。</p><p><code>git pull</code>命令将远程仓库的资源拉取到本地。常用的用法，切换到主分支，然后<code>git pull</code>就可以了，此命令相当于本地主分支的资源与远程的仓库资源做了同步</p><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并:</p><p><code>git pull origin master:brantest</code></p><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略 <code>：&lt;本地分支名&gt;</code></p></blockquote><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><blockquote><p>从远程仓库中下载资源，且和pull不一样，pull会合并资源，fetch不会</p></blockquote><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><blockquote><p>命令格式：<code>git rm &lt;file&gt;</code></p><p><code>git rm &lt;file&gt;</code> 将文件从工作区和暂存区删除</p><p><code>git rm</code>用于删除文件</p><p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 <code>Changes not staged for commit</code> 的提示.</p><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p><p><code>git rm -f &lt;file&gt;</code></p><p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可</p><p><code>git rm --cached &lt;file&gt;</code></p><p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p><p><code>git rm –r *</code></p></blockquote><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><blockquote><p>命令格式：<code>git mv [file] [newfile] </code></p><p>git mv 命令用于移动或重命名一个文件、目录、软连接，如要将一个test.txt文件重命名为newtest.txt，则可以使用如下命令：</p><p><code>git mv test.txt newtest.txt</code></p><p>如果新文件名已经存在，但还是要重命名它，可以使用 <strong>-f</strong> 参数：</p><p><code>git mv -f [file] [newfile]</code></p></blockquote><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><blockquote><p><em><strong>git branch</strong></em> 有多种命令格式：</p><ul><li>**<code>git branch</code>**：查看分支命令，其中<code>*</code>号的分支为当前所在分支。<code>git branch -a</code>查看本地分支和远程分支</li><li>**<code>git branch (branchname)</code>**：创建分支命令， 我们也可以使用 <strong><code>git checkout -b (branchname)</code></strong> 命令来创建新分支并立即切换到该分支下，从而在该分支中操作</li><li>**<code>git checkout (branchname)</code>**：切换分支命令</li><li><strong><code>git branch -delete (branchname)</code><strong>：删除分支命令,可以简化为</strong><code>git branch -d (branchname)</code></strong></li></ul></blockquote><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><blockquote><p>命令格式：<code>git merge &lt;需要合并的分支&gt;</code></p><p><code>git merge &lt;需要合并的分支&gt;</code>该命令执行后，会将<code>需要合并的分支</code>合并到<code>当前分支</code></p></blockquote><h4 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h4><blockquote><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。不用 -a 选项也可以执行的，但它不会记录这标签是啥.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v1.0 </span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v0.9 85fc7e7</span><br><span class="line">&gt;$ git log --oneline --decorate --graph</span><br><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag</span><br><span class="line">&gt;v0.9</span><br><span class="line">&gt;v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h3><p>前面我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。本本将使用 Github 作为远程仓库，来介绍Git 远程仓库的使用。</p><p>下面介绍远程仓库常用的几种指令：</p><ul><li><code>git remote add</code>：添加远程仓库</li><li><code>git remote</code>：查看当前的远程仓库</li><li><code>git fetch</code>、<code>git pull</code>：提取远程仓仓库</li><li><code>git push</code>：推送到远程仓库</li><li><code>git remote rm</code>：删除远程仓库</li></ul><h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><blockquote><p>命令格式：<code>git remote add [alias] [url]</code></p><p>参数[alias]为别名， <code>[url]</code>为远程仓库的地址，如：我们可以将<a href="https://github.com/Yhq00/Yhq00.github.io.git">https://github.com/Yhq00/Yhq00.github.io.git</a></p><p>仓库添加到本地，并命名为test，操作如下：</p><p><code>git remote add https://github.com/Yhq00/Yhq00.github.io.git </code></p></blockquote><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h4><blockquote><p>命令格式：<code>git remote</code>，该命令可以查看当前有哪些远程仓库</p></blockquote><h4 id="git-fetch、git-pull"><a href="#git-fetch、git-pull" class="headerlink" title="git fetch、git pull"></a>git fetch、git pull</h4><blockquote><p>命令格式：<code>git fetch [alias]</code>、<code>git pull [alias]</code></p><p><code>git fetch</code>、<code>git pull</code>可以提取远程仓库的数据，如果有多个远程仓库，我们可以在后面加仓库的别名，操作如下:</p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch</code>和<code>git pull</code>的区别：</p><ol><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动合并。</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地。</li></ol></blockquote><h4 id="git-push-1"><a href="#git-push-1" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push [alias] [branch]</code></p><p>该命令会推送你的新分支与数据到某个远端仓库.</p></blockquote><h4 id="git-remote-rm"><a href="#git-remote-rm" class="headerlink" title="git remote rm"></a>git remote rm</h4><blockquote><p>命令格式: <code>git remote rm [alias]</code></p><p><code>git remote rm</code>删除远程仓库</p></blockquote><p>到此，基本的git操作就介绍完了。</p><p>参考自:</p><p><a href="https://blog.csdn.net/qtiao/article/details/97783243">Git 常用基本命令使用详细大全_git常用命令_坚强的小水滴的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/git/git-tutorial.html">菜鸟Git教程</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Git%E4%BD%BF%E7%94%A8/">Git使用</category>
      
      
      <category domain="http://example.com/tags/Git/">Git</category>
      
      
      <comments>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>文件路径注重点及网络路径和本地路径</title>
      <link>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</link>
      <guid>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</guid>
      <pubDate>Mon, 13 Mar 2023 23:59:32 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用&lt;code&gt;\&lt;/code&gt;img&lt;code&gt;\&lt;/code&gt;yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用<code>\</code>img<code>\</code>yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端口，图片能加载，传到网络服务器上缺不可以加载，后来研究了一下原来是<code>\</code>的原因，特此记录一下。</p></blockquote><blockquote><p>Unix使用斜杆/ 作为路径分隔符，而web应用最新使用在Unix系统上面，所以目前所有的网络地址都采用 斜杆/ 作为分隔符。<br>Windows由于使用 斜杆/ 作为DOS命令提示符的参数标志了，为了不混淆，所以采用 反斜杠\ 作为路径分隔符。所以目前windows系统上的文件浏览器都是用 反斜杠\ 作为路径分隔符。随着发展，DOS系统已经被淘汰了，命令提示符也用的很少，斜杆和反斜杠在大多数情况下可以互换，没有影响。<br>知道这个背景后，可以总结一下结论：<br>（1）浏览器地址栏网址使用 斜杆/ ;<br>（2）windows文件浏览器上使用 反斜杠\ ;<br>（3）出现在html url() 属性中的路径，指定的路径是网络路径，所以必须用 斜杆/ ;<br><code>// 如果url后面用反斜杠\，就不会显示任何背景</code><br>（4）出现在普通字符串中的路径，如果代表的是windows文件路径，则使用斜杆/和反斜杠\是一样的如果代表的是网络文件路径，则必须使用 斜杆/ ;<br><code>// 本地文件路径，/ 和 \ 是等效的</code><br><code>// 网络文件路径，一定要使用 斜杆/</code><br>（5）windows系统的地址栏能够识别单反斜杠”\“，而不能识别双反斜杠”\\“，这是系统文件系统自身的约定，路径层次使用“\”区分而不是使用“\\”来区分：<br>所以F:\\Office\\Trunk__Out\\Pro Debug\\Bin\\OfficeInfo.dll这样是不正确的。<br>而在程序中，字符串中的“\”主要是为了转义，“\”转义后被理解为“\”,“\”才能够被操作系统文件系统所理解，比如用字符串表示上述路径：“F:\Office\Trunk\__Out\Pro Debug\Bin\OfficeInfo.dll”，同理，如果想要表示“\”，可以写作“\\”。</p></blockquote><blockquote><p>在不同系统的情况系 indows下是,linux和unix下是/ ,但在Windows中没有本质区别。<br>但是由于 \ 也是转义字符的起始字符，<br>所以，路径中的 \ 通常需要使用 \如果是 / 就不需要使用转义了<br>如C中文件操作，c:\kkk\dd.txt c:/kkk/dd.txt一样<br>“./“：代表目前所在的目录<br>“../“：代表上一层目录<br>\ 用于本地/ 用于网络连接地址</p></blockquote><p><a href="https://www.cnblogs.com/lhang55/p/7616816.html#:~:text=%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%EF%BC%9A%2F%E5%92%8C%E7%9A%84%E5%8C%BA%E5%88%AB%20Unix%E4%BD%BF%E7%94%A8%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%EF%BC%8C%E8%80%8Cweb%E5%BA%94%E7%94%A8%E6%9C%80%E6%96%B0%E4%BD%BF%E7%94%A8%E5%9C%A8Unix%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%9D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E7%9B%AE%E5%89%8D%E6%89%80%E6%9C%89%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E9%83%BD%E9%87%87%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82,Windows%E7%94%B1%E4%BA%8E%E4%BD%BF%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BADOS%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E7%9A%84%E5%8F%82%E6%95%B0%E6%A0%87%E5%BF%97%E4%BA%86%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%B8%8D%E6%B7%B7%E6%B7%86%EF%BC%8C%E6%89%80%E4%BB%A5%E9%87%87%E7%94%A8%20%E5%8F%8D%E6%96%9C%E6%9D%A0%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82">参考转载自：此链接</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="http://example.com/tags/%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/">路径问题</category>
      
      
      <comments>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript输出</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript输出&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript不提供任何内建的打印或显示函数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 显示方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Win</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><p><strong>JavaScript输出</strong></p><hr><p>JavaScript不提供任何内建的打印或显示函数。</p><hr><p><strong>JavaScript 显示方式</strong></p><ul><li>使用Window.alert( ) 写入警告框</li><li>使用document.write( )写入HTML输出</li><li>使用innerHTML 写入HTML元素</li><li>使用console.log()写入浏览器控制台</li></ul><p><strong>实例：</strong></p><ol><li><p>使用Window.alert( ) 写入警告框</p><p><img src="/./img/JS1.png" alt="JS1"></p></li></ol><p>2.使用document.write( )写入HTML输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(5 + 6)&quot;</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击前：</p><p><img src="/./img/js2-1.png" alt="js211"></p><p>点击后：</p><p><img src="/./img/js2-2.png" alt="js2-2"></p><p><strong>注意：</strong>在 HTML 文档完全加载后使用 <code>document.write()</code> 将<em>删除所有已有的 HTML</em></p><p><strong>提示：</strong><code>document.write()</code> 方法仅用于测试</p><p>3.使用innerHTML 写入HTML元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="number">5</span> + <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/./img/js3.png" alt="js3"></p><p><strong>提示：</strong>更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><p>4.使用console.log()写入浏览器控制台</p><p><img src="/./img/js4.png" alt="js4"></p><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript原型链</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;JavaScript原型链&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要搞清楚原型链，我们首先了解什么是&lt;code&gt;原型&lt;/code&gt;？每个函数都有&lt;code&gt;prototype&lt;/code&gt;属性，我们称之为&lt;code&gt;原型&lt;/code&gt;,又</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>JavaScript原型链</strong></p><blockquote><p>要搞清楚原型链，我们首先了解什么是<code>原型</code>？每个函数都有<code>prototype</code>属性，我们称之为<code>原型</code>,又因为这个属性的值是一个对象，所以我们也称为<code>原型对象</code>。</p><p>那么什么是<code>对象</code>呢？</p><p>这里我们要了解在JavaScript中对象是一种引用数据类型。我们可以通过很多种方式来创建一个对象。我们常用构造函数的方式来创建一个对象：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成实列</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;小明&#x27;</span>，<span class="number">16</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>  那么，函数与对象的关系是怎么样的呢？</p><ul><li>函数是对象，对象都是通过函数创建的。</li><li>函数与对象并不是简单的包含与被包含的关系。</li></ul></blockquote><blockquote><p>在我们上面创建的对象中，通过定义常量实例化后，在原来<code>构造函数</code>中通过<code>this</code>赋值的方法或者属性，已经在实例化后成为了每个实例的<code>实例属性</code>和<code>实例方法</code>，无法共享公共属性和方法。所以设计出了一个<code>原型对象</code>，来存储这个构造函数的公共属性及方法。</p></blockquote><blockquote><p>我们再下面一段代码了加深一下理解：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age,sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line"><span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法 打印：张三说：hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到我们实例对象实例<code>p1</code>调用到<code>Person</code>这个<code>构造函数</code>的<code>原型对象</code>上的say()方法。但是为什么呢？明明只有在<code>构造函数</code>内部通过<code>this</code>来赋值的属性或者方法才会被实例所继承，为什么在<code>构造函数</code>的<code>原型对象</code>上定义的<code>say</code>方法也能通过实例来调用到呢？这里就引出了<code>原型链</code>这个概念。</p></blockquote><blockquote><p>实际上<code>原型对象</code>中存在的<code>构造函数</code>指向了我们function创建的对象。并且每个对象都有一个<code>__proto__</code>属性，这个属性会指向<code>实例对象</code>的<code>构造函数</code>的<code>原型对象</code>，这样使得彼此之间存在一定的指向关系，能够使每个<code>实列化对象</code>能够使用<code>构造函数</code>的<code>原型对象</code>的方法。</p></blockquote><blockquote><p>而这种指向关系，我们就称之为原型链。图解如下：</p></blockquote><p><img src="/./img/yxl.png" alt="11"></p><p>​            </p><p><img src="/./img/11.png" alt="11"></p><blockquote><p>我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p>在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发中需注意点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line">    <span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>); <span class="comment">// 新创建一个Proson实例对象</span></span><br><span class="line">    p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法</span></span><br><span class="line">    p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">    p1.<span class="property">__proto__</span>.<span class="property">do</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;往原型对象中添加方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p2.<span class="title function_">do</span>(); <span class="comment">// 打印出了-往原型对象中添加方法</span></span><br></pre></td></tr></table></figure><hr><p><strong>原型链的尽头</strong></p><hr><blockquote><p>我们可以看到，<code>实例对象</code>的<code>__proto__</code>属性指向了一个<code>构造函数</code>的<code>原型对象</code>，该<code>构造函数的原型对象</code>的<code>_proto_</code>属性指向了<code>Object</code>的<code>原型对象</code>，而其<code>Object的原型对象</code>的<code>_proto_</code>属性指向了null，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><p><img src="/./img/12.png" alt="11"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript第一天被提问的问题</title>
      <link>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</link>
      <guid>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript学习笔记&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记&quot;&gt;&lt;/a&gt;JavaScript学习笔记&lt;/h1&gt;&lt;h6 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h6 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">JavaScript基本数据类型分为Null、Undefined、Boolean、Number、BigInt、String、2015年Symbol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavaScript 数据类型</span><br><span class="line">JavaScript 中有五种可包含值的数据类型：</span><br><span class="line"></span><br><span class="line">字符串（string）</span><br><span class="line">数字（number）</span><br><span class="line">布尔（boolean）</span><br><span class="line">对象（object）</span><br><span class="line">函数（function）</span><br><span class="line">有三种对象类型：</span><br><span class="line"></span><br><span class="line">对象（Object）</span><br><span class="line">日期（Date）</span><br><span class="line">数组（Array）</span><br><span class="line">同时有两种不能包含值的数据类型：</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line"> Null类型只有一个值Null</span><br><span class="line"> Undefined类型只有一个值Undefined</span><br><span class="line"> Boolean类型有两个值true、false</span><br><span class="line"> Number类型表示IEE754标准的双精度64位二进制格式的值(存储 2^-1074（Number.MIN_VALUE）和 2^1024（Number.MAX_VALUE）之</span><br><span class="line"> 的正浮点数，以及 -2^-1074 和 -2^1024 之间的负浮点数，但是它仅能安全地存储在 -(2^53 − 1)（Number.MIN_SAFE_INTEGER）     到2^53 − 1</span><br><span class="line"> BigInt类型在 Javascript 中是一个数字的原始值，它可以表示任意大小的整数。使用 BigInt，你可以安全地存储和操作巨大的整数，甚至   超过 Number 的安全整数限制</span><br><span class="line"> String类型表示文本数据</span><br><span class="line"> Symbol是唯一并且不可变的原始值并且可以用来作为对象属性的键（如下）。在某些程序语言当中，Symbol 也被称作“原子类型”（atom）。     symbol 的目的是去创建一个唯一属性键，保证不会与其他代码中的键产生冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">问题：Js操作数组有哪几种方法？</span><br><span class="line">答案：</span><br><span class="line">length属性。主要用于获得数组内元素的个数，常用于for循环或一些判断语句中取得数组的长度。</span><br><span class="line">concat()方法。用于把两个或多个数组合并成一个数组，数组的索引会按照合并数组的顺序重新排序</span><br><span class="line">join()方法。主要用于将数组内的元素使用字符拼接成一个字符串，不传拼接字符参数，默认使用逗号。</span><br><span class="line">pop()方法。删除数组中最后一个元素，与之相反的方法是push()，向数组的末尾添加一个或多个元素。</span><br><span class="line">reverse()方法。这个方法主要用于反转数组元素，索引数组 reverse后会重新排序。</span><br><span class="line">slice()方法。用于从数组中提取所需要的元素，传入的参数是提取元素开始位置，例如slice(3)，则从下标为3的元素开始提取。</span><br><span class="line">splice()方法。splice()方法需要传入三个参数，第一个参数是索引开始的位置，第二个参数是删除元素的数量，第三个参数是在开始索引的位置插入的元素（可以为多个元素）。</span><br></pre></td></tr></table></figure><p><img src="/./img/1.jpg" alt="1"></p><p><img src="/./img/2.webp" alt="2"></p><p><img src="/./img/3.webp" alt="3"></p><p><img src="/./img/4.webp" alt="4"></p><p><img src="/./img/5.webp" alt="5"></p><p><img src="/./img/6.webp" alt="6"></p><p><img src="/./img/7.webp" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题3：Js输出一个数组内所有元素的方法？</span><br><span class="line">答案：</span><br><span class="line">1、使用“console.log(数组名)”输出数组；2、利用for或for in语句循环输出数组；3、利用forEach()遍历数组，输出数组元素；4、利用map()遍历数组，输出数组元素。</span><br></pre></td></tr></table></figure><p><strong>方法1：直接利用console.log(数组名)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/374/314/958/1630567297409318.png" alt="1.png"></p><p><strong>方法2：利用for/for in循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/290/588/412/1630567420767090.png" alt="2.png"></p><p><strong>方法4：map()方遍历数组，循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=arr.<span class="title function_">map</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/192/435/414/1630567596204506.png" alt="4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript知识回顾</title>
      <link>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <guid>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;js回顾&quot;&gt;&lt;a href=&quot;#js回顾&quot; class=&quot;headerlink&quot; title=&quot;js回顾&quot;&gt;&lt;/a&gt;js回顾&lt;/h1&gt;&lt;h2 id=&quot;js类构造方法&quot;&gt;&lt;a href=&quot;#js类构造方法&quot; class=&quot;headerlink&quot; title=&quot;js类</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="js回顾"><a href="#js回顾" class="headerlink" title="js回顾"></a>js回顾</h1><h2 id="js类构造方法"><a href="#js类构造方法" class="headerlink" title="js类构造方法:"></a>js类构造方法:</h2><p>构造方法**<code>constructor</code>** 是一种用于创建和初始化<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class"><code>class</code></a>创建的对象的特殊方法</p><p>在一个类中只能有一个名为“constructor”的特殊方法。一个类中出现多次构造函数 (<code>constructor)</code>方法将会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError"><code>SyntaxError</code></a> 错误。</p><p>在一个构造方法中可以使用<code>super</code>关键字来调用一个父类的构造方法。</p><p>如果没有显式指定构造方法，则会添加默认的 constructor 方法。</p><p>如果不指定一个构造函数 (constructor) 方法，则使用一个默认的构造函数 (constructor)。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor">constructor链接</a></p><figure class="highlight plaintext"><figcaption><span>函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const add = (a,b) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于派生类，默认构造函数是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="js原型链："><a href="#js原型链：" class="headerlink" title="js原型链："></a>js原型链：</h2><p>构造函数 - 继承机制  </p><blockquote><p> JS通过<code>构造函数</code>来生成<code>实例</code>。但是又出现了一个新的问题，在<code>构造函数</code>中通过<code>this</code>赋值的属性或者方法，是每个实例的<code>实例属性</code>以及<code>实例方法</code>，无法共享公共属性。所以又设计出了一个<code>原型对象</code>，来存储这个<code>构造函数</code>的公共属性以及方法。</p></blockquote><blockquote><p> 我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p> 在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><p><a href="https://juejin.cn/post/6984678359275929637#heading-7">Js原型链</a></p><hr><h2 id="super："><a href="#super：" class="headerlink" title="super："></a><strong>super</strong>：</h2><ul><li><h5 id="this关键词指向函数所在的当前对象"><a href="#this关键词指向函数所在的当前对象" class="headerlink" title="this关键词指向函数所在的当前对象"></a>this关键词指向函数所在的当前对象</h5></li><li><h5 id="super指向的是当前对象的原型对象"><a href="#super指向的是当前对象的原型对象" class="headerlink" title="super指向的是当前对象的原型对象"></a>super指向的是当前对象的原型对象</h5></li></ul><blockquote><p> ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，<strong>方法内部的<code>this</code>指向当前的子类实例</strong></p></blockquote><p>Class中的 super()，它在这里表示父类的构造函数，用来新建父类的 this 对象</p><blockquote><p> 子类没有自己的this对象，而是继承父亲的this对象，然后进行加工。如果不调用super，子类就得不到this对象</p><p>ES5的继承，实质上是先创造子类的实例对象this，然后再将父类的方法添加到this上（Parent.call(this)）.<br>ES6的继承，需要先创建父类的this，子类调用super继承父类的this对象，然后再加工。</p><p>如果子类没有创建constructor，这个方法会被默认添加.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">             </span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">y</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Demo2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Demo</span>&#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">         <span class="variable language_">super</span>(x,y);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">x</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task1</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task2</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Demo2</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"> d.<span class="title function_">task1</span>()    <span class="comment">//[&quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br><span class="line"> d.<span class="title function_">task2</span>()    <span class="comment">//[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure><p><u>super 在静态方法之中指向父类，在普通方法之中指向父类的原型对象</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="title function_">myMethod</span>(<span class="number">1</span>); <span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">myMethod</span>(<span class="number">2</span>); <span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure><h2 id="ES6的箭头函数写法"><a href="#ES6的箭头函数写法" class="headerlink" title="ES6的箭头函数写法:"></a>ES6的<a href="https://so.csdn.net/so/search?q=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">箭头函数</a>写法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//经典格式： 函数名 = ( 参数 ) =&gt; &#123; 方法体 &#125; </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x,y</span>)=&gt;&#123; </span><br><span class="line">    <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum1</span> = (<span class="params">x,y</span>) =&gt; x+y;  </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum2</span> = x =&gt; &#123; 方法体 &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>* 箭头函数里是没有<strong>this</strong>的，只会向上一层寻找（可能是window）</li><li>* 箭头函数里是没有<strong>arguments</strong>的</li><li>* 箭头函数不能作为<strong>构造函数</strong></li><li>***** 箭头函数不能定义<strong>原型</strong>下的方法</li></ol></blockquote><h2 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h2><p>函数定义方式通常需要显式的指定函数名称，在代码执行前就被解释器加载到作用域中，这个特性可以让我们在函数定义之前就调用该函数。</p><p>既然提到函数声明，就要提到函数的作用域。<strong>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的，这意味着，变量在声明之前已经可用。</strong>这个特性可以被称为<strong>声明提前</strong>，即在函数体内声明的所有变量，在声明之前已经有定义，但只有在执行到这个变量时才会被真正赋值。</p><p>函数直接量表达式也是用到了关键字function。一般这种定义方式适用于将它作为一个大的表达式的一部分，比如在赋值和调用过程中定义函数。通过函数直接量生成的函数，函数名称可以省略，此时就是一个匿名函数。（匿名函数谨慎使用）</p><p><a href="https://blog.csdn.net/crazyorange_shen/article/details/68957987">js函数的三种定义方式</a></p><h2 id="JS数据结构和数据类型"><a href="#JS数据结构和数据类型" class="headerlink" title="JS数据结构和数据类型"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">JS数据结构和数据类型</a></h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/05/04/hello-world/</link>
      <guid>http://example.com/2021/05/04/hello-world/</guid>
      <pubDate>Tue, 04 May 2021 04:07:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/05/04/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>遇到问题及解决方案(持续更新)</title>
      <link>http://example.com/2020/05/16/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</link>
      <guid>http://example.com/2020/05/16/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</guid>
      <pubDate>Sat, 16 May 2020 12:46:30 GMT</pubDate>
      
        
        
      <description>&lt;h5 id=&quot;问题01描述deprecated-x63-x6f-x72-x65-45-x6a-x73-64-50-46-x36-46-x31-x32-core-js-lt-3-23-3：&quot;&gt;&lt;a href=&quot;#问题01描述deprecated-x63-x6f-x72-x65-4</description>
        
      
      
      
      <content:encoded><![CDATA[<h5 id="问题01描述deprecated-x63-x6f-x72-x65-45-x6a-x73-64-50-46-x36-46-x31-x32-core-js-lt-3-23-3："><a href="#问题01描述deprecated-x63-x6f-x72-x65-45-x6a-x73-64-50-46-x36-46-x31-x32-core-js-lt-3-23-3：" class="headerlink" title="问题01描述deprecated &#x63;&#x6f;&#x72;&#x65;&#45;&#x6a;&#x73;&#64;&#50;&#46;&#x36;&#46;&#x31;&#x32;: core-js@&lt;3.23.3："></a>问题01描述deprecated <a href="mailto:&#x63;&#x6f;&#x72;&#x65;&#45;&#x6a;&#x73;&#64;&#50;&#46;&#x36;&#46;&#x31;&#x32;">&#x63;&#x6f;&#x72;&#x65;&#45;&#x6a;&#x73;&#64;&#50;&#46;&#x36;&#46;&#x31;&#x32;</a>: core-js@&lt;3.23.3：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS\IdeaWorkSpace\vue\vue&gt;npm i element-ui -S</span><br><span class="line">npm WARN deprecated core-js@2.6.12: core-js@&lt;3.23.3 is no longer maintained and not recommended for</span><br><span class="line">usage due to the number of issues. Because of the V8 engine whims, feature detection in old core-js</span><br><span class="line">versions could cause a slowdown up to 100x even if nothing is polyfilled. Some versions have web com</span><br><span class="line">patibility issues. Please, upgrade your dependencies to the actual version of core-js.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g core-js@3.23.3</span><br></pre></td></tr></table></figure><h5 id="问题02描述HTTPS-connections-may-not-be-secure-See-https-aka-ms-gcm-tlsverify-for-more-information-："><a href="#问题02描述HTTPS-connections-may-not-be-secure-See-https-aka-ms-gcm-tlsverify-for-more-information-：" class="headerlink" title="问题02描述HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify for more information.："></a>问题02描述HTTPS connections may not be secure. See <a href="https://aka.ms/gcm/tlsverify">https://aka.ms/gcm/tlsverify</a> for more information.：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">warning: ----------------- SECURITY WARNING ----------------</span><br><span class="line">warning: | TLS certificate verification has been disabled! |</span><br><span class="line">warning: ---------------------------------------------------</span><br><span class="line">warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify for more information.</span><br></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify true</span><br></pre></td></tr></table></figure><h5 id="问题03描述：message-文档中根元素前面的标记必须格式正确-row-col-1-2"><a href="#问题03描述：message-文档中根元素前面的标记必须格式正确-row-col-1-2" class="headerlink" title="问题03描述：message:文档中根元素前面的标记必须格式正确.[row,col]:[1,2]"></a>问题03描述：message:文档中根元素前面的标记必须格式正确.[row,col]:[1,2]</h5><ul><li><p>最近在学习 spring-boot的过程中，新建spring-boot项目老是出现以下提示，如图：</p></li><li><p>导致新建的工程只能打开部分文件，如图：</p></li><li><p>解决方法如下：<br>一、<br>Idea中点击“File”-&gt;“Invalidate Caches / Restart…”，之后会弹出一个对话框，再点击Invalidate and Restart，之后等待工程打开应该就可以了；</p></li><li><p>二、<br>如果第一种方法不行，那就去建工程的文件下，找到项目的**.idea** 文件夹，<br>直接删除，再重新启动项目就可以打开程序了。<br>——————————————</p></li></ul><h5 id="问题04：解决Vuex刷新后无数据且页面空白"><a href="#问题04：解决Vuex刷新后无数据且页面空白" class="headerlink" title="问题04：解决Vuex刷新后无数据且页面空白"></a>问题04：解决Vuex刷新后无数据且页面空白</h5><p>自己网上找到的解决办法浅显地解决，没有知道原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">    //解决刷新时vuex的数据重置消失</span><br><span class="line">    created() &#123;</span><br><span class="line">      // 先检查sessionStorage中是否有数据，若存在数据则加载到vuex</span><br><span class="line">      if (sessionStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">        this.$store.replaceState(</span><br><span class="line">                Object.assign(</span><br><span class="line">                        &#123;&#125;,</span><br><span class="line">                        this.$store.state,</span><br><span class="line">                        JSON.parse(sessionStorage.getItem(&quot;store&quot;))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        sessionStorage.removeItem(&quot;store&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="line">      window.addEventListener(&quot;beforeunload&quot;, () =&gt; &#123;</span><br><span class="line">        sessionStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">    //解决刷新时vuex的数据重置消失</span><br><span class="line">    created() &#123;</span><br><span class="line">      // 先检查sessionStorage中是否有数据，若存在数据则加载到vuex</span><br><span class="line">      if (sessionStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">        this.$store.replaceState(</span><br><span class="line">                Object.assign(</span><br><span class="line">                        &#123;&#125;,</span><br><span class="line">                        this.$store.state,</span><br><span class="line">                        JSON.parse(sessionStorage.getItem(&quot;store&quot;)),</span><br><span class="line">                        JSON.parse(sessionStorage.getItem(&quot;menu&quot;))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        this.$store.commit(&quot;setMenu&quot;,JSON.parse(sessionStorage.getItem(&quot;menu&quot;)));</span><br><span class="line">        sessionStorage.removeItem(&quot;store&quot;);</span><br><span class="line">        sessionStorage.removeItem(&quot;menu&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="line">      window.addEventListener(&quot;beforeunload&quot;, () =&gt; &#123;</span><br><span class="line">        sessionStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">        sessionStorage.setItem(&quot;menu&quot;, JSON.stringify(this.$store.state.routee));</span><br><span class="line">        this.$store.commit(&quot;setMenu&quot;,JSON.parse(sessionStorage.getItem(&quot;menu&quot;)));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="问题05："><a href="#问题05：" class="headerlink" title="问题05："></a>问题05：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java中List初始时赋值为null，则不能添加add</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重定向：Controller之间互相实现页面跳转（或者请求）利用redirect</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据库表id重置: truncate table 表名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一份form表单提交到多个地址: 用formaction</span><br></pre></td></tr></table></figure><h5 id="问题06："><a href="#问题06：" class="headerlink" title="问题06："></a>问题06：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db中表的主健采用了自增的方式,但是在bean中并没有定义id属性，导致报错org.apache.ibatis.executor.ExecutorException: No setter found for the keyProperty &#x27;id&#x27;</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在配置中删除keyProperty=&quot;id&quot;的配置</span><br></pre></td></tr></table></figure><p>原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">主健采用了自增的方式只需要配置：useGeneratedKeys=&quot;true&quot;</span><br><span class="line"></span><br><span class="line">keyProperty=&quot;id&quot;的意思是 将主键的中的数据 放到传入对象的成员变量id里面，因为在对像的成员变量中没有定义属性id，也没有定时id属性的get，set方法，所以会报错：org.apache.ibatis.executor.ExecutorException: No setter found for the keyProperty &#x27;id&#x27; </span><br><span class="line"></span><br><span class="line">如果db的表中没有指定主键：可以用属性keyColumn</span><br><span class="line"></span><br><span class="line">useGeneratedKeys=true,keyProperty=&quot;userId&quot;,keyColumn=&quot;user_id&quot;</span><br><span class="line"></span><br><span class="line">这个注解的意思就是，使用数据库自动增长的主键，并从table中user_id字段里面把数据放到传入对象的成员变量userId里面。</span><br><span class="line"></span><br><span class="line">如果我们已经在数据库表中指定了主键，那么keyColumn属性可以缺省。</span><br></pre></td></tr></table></figure><h5 id="问题07："><a href="#问题07：" class="headerlink" title="问题07："></a>问题07：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vuex中刷新页面丢失，动态路由不生效。</span><br></pre></td></tr></table></figure><p>b站教的解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.npm i vuex-persistedstate</span><br><span class="line">2.import createPersistedState from &#x27;vuex-persistedstate&#x27;</span><br><span class="line">3.    plugins:[createPersistedState()]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">import router,&#123;resetRouter&#125; from &#x27;../router&#x27;</span><br><span class="line">import createPersistedState from &#x27;vuex-persistedstate&#x27;</span><br><span class="line">vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">function addNewRoute(menuList) &#123;</span><br><span class="line">    console.log(&quot;打印menuList&quot;);</span><br><span class="line">    console.log(menuList);</span><br><span class="line">    let routes = router.options.routes;</span><br><span class="line">    // console.log(&quot;路由&quot;);</span><br><span class="line">    // console.log(routes);</span><br><span class="line">    routes.forEach(routeItem=&gt;&#123;</span><br><span class="line">        if (routeItem.path==&quot;/Index&quot;)&#123;</span><br><span class="line">            menuList.forEach(menu=&gt;&#123;</span><br><span class="line">                let childRoute = &#123;</span><br><span class="line">                    path:&#x27;/&#x27;+menu.menuclick,</span><br><span class="line">                    name:menu.menuname,</span><br><span class="line">                    meta:&#123;</span><br><span class="line">                    title:menu.menuname,</span><br><span class="line">                &#125;,</span><br><span class="line">                    component:()=&gt;import(&#x27;../components/&#x27;+menu.menucomponent),</span><br><span class="line">                &#125;;</span><br><span class="line">                routeItem.children.push(childRoute);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    resetRouter();</span><br><span class="line">    router.addRoutes(routes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        menu: []</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        setMenu(state,menuList) &#123;</span><br><span class="line">            state.menu =menuList;</span><br><span class="line">            addNewRoute(menuList);</span><br><span class="line">        &#125;,</span><br><span class="line">        setRoute(state,menuList) &#123;</span><br><span class="line">            state.menu =menuList;</span><br><span class="line">            addNewRoute(menuList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        getMenu(state)&#123;</span><br><span class="line">            return state.menu</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[createPersistedState()]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      user:JSON.parse(sessionStorage.getItem(&#x27;CurUser&#x27;)),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,watch:&#123;</span><br><span class="line">    &#x27;$store.state.menu&#x27;:&#123;</span><br><span class="line">      handler(val,old)&#123;</span><br><span class="line">        if (!old &amp;&amp; this.user &amp;&amp; this.user.no)&#123;</span><br><span class="line">          this.$store.commit(&quot;setRoute&quot;,val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">html,body,#app &#123;</span><br><span class="line">  /*font-family: Avenir, Helvetica, Arial, sans-serif;*/</span><br><span class="line">  /*-webkit-font-smoothing: antialiased;*/</span><br><span class="line">  /*-moz-osx-font-smoothing: grayscale;*/</span><br><span class="line">  /*text-align: center;*/</span><br><span class="line">  /*color: #2c3e50;*/</span><br><span class="line">  /*margin-top: 60px;*/</span><br><span class="line">  height: 100%;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line"></span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><h5 id="问题08：mysql自增id重置-从0开始增长"><a href="#问题08：mysql自增id重置-从0开始增长" class="headerlink" title="问题08：mysql自增id重置 从0开始增长"></a>问题08：mysql自增id重置 从0开始增长</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自增ID 重新从0 开始增长</span><br><span class="line"></span><br><span class="line">ALTER TABLE 表名 AUTO_INCREMENT=1;</span><br></pre></td></tr></table></figure><h5 id="问题09："><a href="#问题09：" class="headerlink" title="问题09："></a>问题09：</h5><p>项目报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error:Kotlin: Module was compiled with an incompatible version of Kotlin. Th</span><br><span class="line"></span><br><span class="line">error:[Kotlin](https://so.csdn.net/so/search?q=Kotlin&amp;spm=1001.2101.3001.7020):module was compiled with an incompatible version of kotlin the binary version of its metadata is</span><br></pre></td></tr></table></figure><p>解决：</p><h6 id="方案一、compile项目"><a href="#方案一、compile项目" class="headerlink" title="方案一、compile项目"></a>方案一、compile项目</h6><p><img src="/./img/wt1.png" alt="01"></p><h6 id="方案二、"><a href="#方案二、" class="headerlink" title="方案二、"></a>方案二、</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReBuild Project</span><br></pre></td></tr></table></figure><p><img src="/./img/wt2.png" alt="02"></p><h5 id="问题10：mysql中定义datetime类型的值，在前端如何显示以及重新传入并写进数据库"><a href="#问题10：mysql中定义datetime类型的值，在前端如何显示以及重新传入并写进数据库" class="headerlink" title="问题10：mysql中定义datetime类型的值，在前端如何显示以及重新传入并写进数据库"></a>问题10：mysql中定义datetime类型的值，在前端如何显示以及重新传入并写进数据库</h5><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">在对应的实体类中对应字段，添加注解    </span><br><span class="line">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">@Data</span><br><span class="line">@ApiModel(value = &quot;Exam对象&quot;, description = &quot;&quot;)</span><br><span class="line">public class Exam implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    @TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    private String examName;</span><br><span class="line"></span><br><span class="line">    private String examAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private LocalDateTime examStartTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">    private LocalDateTime examEndTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="问题11："><a href="#问题11：" class="headerlink" title="问题11："></a>问题11：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.form.validate()不起作用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在表单校验的规则中，一定要有 callback()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="http://example.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <comments>http://example.com/2020/05/16/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
