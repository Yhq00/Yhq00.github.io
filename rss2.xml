<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>这波又白给</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>在天堂和地域之间，没有我选择的权利，只有别人选择我的命运！</description>
    <pubDate>Sun, 26 Mar 2023 08:13:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CSS浮动与定位</title>
      <link>http://example.com/2023/03/26/CSS%E6%B5%AE%E5%8A%A8%E4%B8%8E%E5%AE%9A%E4%BD%8D/</link>
      <guid>http://example.com/2023/03/26/CSS%E6%B5%AE%E5%8A%A8%E4%B8%8E%E5%AE%9A%E4%BD%8D/</guid>
      <pubDate>Sun, 26 Mar 2023 05:26:39 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CSS常用布局&quot;&gt;&lt;a href=&quot;#CSS常用布局&quot; class=&quot;headerlink&quot; title=&quot;CSS常用布局&quot;&gt;&lt;/a&gt;CSS常用布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CSS 常用布局包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常布局流&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CSS常用布局"><a href="#CSS常用布局" class="headerlink" title="CSS常用布局"></a>CSS常用布局</h1><blockquote><p>CSS 常用布局包括：</p><ul><li>正常布局流</li><li>弹性盒</li><li>网格</li><li>浮动</li><li>定位</li><li>多列布局</li><li>响应式设计</li></ul></blockquote><hr><blockquote><p>本篇文章我们主要来介绍CSS的浮动与定位两者布局方式。</p></blockquote><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="float-语法"><a href="#float-语法" class="headerlink" title="float 语法"></a>float 语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: none|left|right|initial|inherit;</span><br></pre></td></tr></table></figure><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">元素向左浮动。</td></tr><tr><td align="left">right</td><td align="left">元素向右浮动。</td></tr><tr><td align="left">none</td><td align="left">默认值。元素不浮动，并会显示在其在文本中出现的位置。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 float 属性的值。</td></tr></tbody></table><h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><table><thead><tr><th>默认值：</th><th>none</th></tr></thead><tbody><tr><td>继承性：</td><td>no</td></tr><tr><td>版本：</td><td>CSS1</td></tr><tr><td>JavaScript 语法：</td><td><em>object</em>.style.cssFloat=”left”</td></tr></tbody></table><h2 id="clear-语法"><a href="#clear-语法" class="headerlink" title="clear 语法"></a>clear 语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear: none|left|right|both|initial|inherit;</span><br></pre></td></tr></table></figure><h3 id="属性值-1"><a href="#属性值-1" class="headerlink" title="属性值"></a>属性值</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">在左侧不允许浮动元素。</td></tr><tr><td align="left">right</td><td align="left">在右侧不允许浮动元素。</td></tr><tr><td align="left">both</td><td align="left">在左右两侧均不允许浮动元素。</td></tr><tr><td align="left">none</td><td align="left">默认值。允许浮动元素出现在两侧。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 clear 属性的值。</td></tr></tbody></table><h3 id="技术细节-1"><a href="#技术细节-1" class="headerlink" title="技术细节"></a>技术细节</h3><table><thead><tr><th>默认值：</th><th>none</th></tr></thead><tbody><tr><td>继承性：</td><td>no</td></tr><tr><td>版本：</td><td>CSS1</td></tr><tr><td>JavaScript 语法：</td><td><em>object</em>.style.clear=”left”</td></tr></tbody></table><blockquote><p><strong>所谓浮动，就是让一个元素脱离标准文档流，漂浮在标准流之上，然后按照指定的方向向左或向右移动，碰到父级边界或者另外一个浮动元素停止。</strong></p></blockquote><blockquote><p>示例，我们给框1一个向左浮动的样式：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div1&#123;</span><br><span class="line">float：right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p></blockquote><p><img src="/./img/float1.png" alt="浮动1"></p><blockquote><p>再请看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。</p><p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p></blockquote><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p><img src="/./img/float2.png" alt="浮动2"></p><blockquote><p>再请看下图，当框 1 向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。</p><p>如果把所有三个框都向左移动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。</p></blockquote><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p><img src="/./img/float3.png" alt="浮动3"></p><h1 id="浮动带来的问题"><a href="#浮动带来的问题" class="headerlink" title="浮动带来的问题"></a>浮动带来的问题</h1><blockquote><p><strong>浮动元素脱离标准文档流，会导致元素重叠或者父元素的高度塌陷。</strong></p><p>这时候就要用到清除浮动。</p><p>清除浮动，顾名思义就是为了解决浮动带来的一系列问题，也可以理解为打破横向排列。</p><p><strong>清除浮动的这个规则，只能影响使用清除的元素本身，不能影响其他元素。</strong></p></blockquote><hr><blockquote><p>接下来我们以一个实际的例子来说明带来的问题及解决的办法。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>其实浮动（float）最开始是用来实现文字环绕图片的。</p></blockquote><h3 id="元素重叠实例"><a href="#元素重叠实例" class="headerlink" title="元素重叠实例"></a>元素重叠实例</h3><p><img src="/./img/float4.png" alt="浮动4"></p><blockquote><p>但是我们发现，图片直接使用向左浮动，并不能达到我们想要的效果，因为，有部分文字实际上被遮挡了。</p><p>实际上，我们可以给两个段落的元素的上外边距添加足够的空间，来解决<code>元素重叠的问题</code>。</p></blockquote><p><img src="/./img/float5.png" alt="float5"></p><h3 id="高度坍塌实列"><a href="#高度坍塌实列" class="headerlink" title="高度坍塌实列"></a>高度坍塌实列</h3><blockquote><p>针对上面的例子，我们来做另一种效果即我们可以将图片靠左浮动，包含文字的元素靠右浮动，这样我们得到了这样的效果：</p></blockquote><p><img src="/./img/float6.png" alt="float6"></p><blockquote><p>虽然看起来效果并没有什么问题，但是，实际上，浮动元素不占据空间，导致原本的<code>高度坍塌</code>。</p></blockquote><blockquote><p>为了解决这个问题，可以使用三种方法来清理浮动，</p></blockquote><h4 id="解决方法一-不推荐"><a href="#解决方法一-不推荐" class="headerlink" title="解决方法一(不推荐)"></a>解决方法一(不推荐)</h4><blockquote><p>我们可以新添一个div来清理浮动：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.news &#123;</span><br><span class="line">  background-color: gray;</span><br><span class="line">  border: solid 1px black;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news img &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news p &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.clear &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;news-pic.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解决方法二-不推荐"><a href="#解决方法二-不推荐" class="headerlink" title="解决方法二(不推荐)"></a>解决方法二(不推荐)</h4><blockquote><p>方法一这样可以实现我们希望的效果，但是需要添加多余的代码。常常有元素可以应用 clear，但是有时候不得不为了进行布局而添加无意义的标记。</p><p>不过我们还有另一种办法，那就是对容器 div 进行浮动：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.news &#123;</span><br><span class="line">  background-color: gray;</span><br><span class="line">  border: solid 1px black;</span><br><span class="line">  float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news img &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news p &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;news&quot;&gt;</span><br><span class="line">&lt;img src=&quot;news-pic.jpg&quot; /&gt;</span><br><span class="line">&lt;p&gt;some text&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这样会得到我们希望的效果。不幸的是，下一个元素会受到这个浮动元素的影响。为了解决这个问题，有些人选择对布局中的所有东西进行浮动，然后使用适当的有意义的元素（常常是站点的页脚）对这些浮动进行清理。这有助于减少或消除不必要的标记。</p></blockquote><h4 id="解决方法三-推荐"><a href="#解决方法三-推荐" class="headerlink" title="解决方法三(推荐)"></a>解决方法三(推荐)</h4><blockquote><p>我们可以使用伪元素来实现清除浮动的效果。</p><p>伪元素：用于创建一些不在DOM树中的元素，并为其添加样式。</p><p>例如，我们可以通过:before来在一个元素之前添加一些文本，并为这些文本添加样式，虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.news &#123;</span><br><span class="line">  background-color: gray;</span><br><span class="line">  border: solid 1px black;</span><br><span class="line">  float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news img &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">.news p &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">.clear::after&#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: table;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;news-pic.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：单独设置<code>.clear::after&#123;clear: both;&#125;</code>是不够严谨的。</p></blockquote><blockquote><p>伪元素选择器的权重通常比单独的类选择器高，所以通常起到了清除浮动的作用。</p><p>但是，这个选择器的设置不够严谨，因为没有设置content属性，它不会在页面上绘制任何合法的内容。这会导致选择器被浏览器忽略，从而无法正确起到清除浮动的作用。</p><p>因此，更好的做法是将content属性设置为””或其他值，以确保浏览器可以正确解析该选择器，从而成功清除浮动。示例代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clear::after &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="那display-block-是必须的吗？"><a href="#那display-block-是必须的吗？" class="headerlink" title="那display: block;是必须的吗？"></a>那display: block;是必须的吗？</h5><blockquote><p>在这个情况下，并不是必需的，但是建议使用。因为after伪元素是一个内联元素，不会在页面上占据空间。如果没有将其设置为block，则该元素可能无法正确清除浮动，导致布局问题。</p><p>将display属性设置为block，可以让该元素在页面上显示为一个块级元素（尽管它实际上是一个伪元素），并占据一定的空间。这样可以确保它在页面上正确地起到清除浮动的作用，同时不会影响其他元素的布局。因此，建议在清除浮动的选择器中将display属性设置为block。</p></blockquote><h5 id="除了display-block-还可以将display设为什么"><a href="#除了display-block-还可以将display设为什么" class="headerlink" title="除了display: block;还可以将display设为什么"></a>除了display: block;还可以将display设为什么</h5><blockquote><p>除了使用 <code>display: block;</code>，在清除浮动（clear float）的选择器中，还可以设置 <code>display: table;</code> 或者 <code>display: flow-root;</code> 来保证清除浮动的效果。</p></blockquote><ol><li><code>display: table;</code></li></ol><blockquote><p>将 <code>display</code> 值设置为 <code>table;</code> 会将伪元素的表现形式更改为表格元素，此时伪元素的宽度自动调整到最宽的内部内容相同（哪个更宽就会自动填充哪一栏），高度也可以自适应调整，能够确保浏览器正确解析，并占据页面上的位置。</p><p>例如：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearfix<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在此代码中，<code>clearfix::after</code> 由于 <code>display: table;</code> 能够添加内容并占据页面上的空间。</p></blockquote><h4 id="解决方法四"><a href="#解决方法四" class="headerlink" title="解决方法四"></a>解决方法四</h4><blockquote><p><code>display: flow-root;(CSS3新增特性)</code></p></blockquote><blockquote><p>在新版本的浏览器中，我们还可以设置 <code>display: flow-root;</code> 来清除浮动，这种方法比较简洁，能确保浏览器正确解析，并占据页面上的位置。</p><p>例如：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clearfix &#123;</span><br><span class="line">  <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在此代码中，清除浮动的作用体现在了 <code>clearfix</code> 这个类选择器上，不需要使用 after 伪元素，能够简化代码。</p><p>总之，使用 <code>display: block;</code>, <code>display: table;</code>, 或者 <code>display: flow-root;</code> 都是在清除浮动时使用的有效选择器，其具体使用还需要根据具体情境而定。</p></blockquote><blockquote><p>当两个子元素进行左右浮动，但是它们的父元素无法正常展示高度时，可以使用 <code>display: flow-root;</code> 来清除子元素的浮动：</p></blockquote><blockquote><p>HTML代码：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>CSS代码：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="comment">/* 父元素不浮动 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的代码中，<code>left</code> 和 <code>right</code> 两个子元素都浮动到了父元素左右两侧，但是父元素的高度却无法展示出来。这时候我们可以在父元素上添加 <code>display: flow-root;</code> 样式来清除浮动，使得父元素能够正常展示高度。</p></blockquote><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><h2 id="position-语法"><a href="#position-语法" class="headerlink" title="position 语法"></a>position 语法</h2><h3 id="属性值-2"><a href="#属性值-2" class="headerlink" title="属性值"></a>属性值</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">absolute</td><td align="left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left">fixed</td><td align="left">生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td align="left">relative</td><td align="left">生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td align="left">static</td><td align="left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 position 属性的值。</td></tr></tbody></table><h3 id="技术细节-2"><a href="#技术细节-2" class="headerlink" title="技术细节"></a>技术细节</h3><table><thead><tr><th>默认值：</th><th>static</th></tr></thead><tbody><tr><td>继承性：</td><td>no</td></tr><tr><td>版本：</td><td>CSS2</td></tr><tr><td>JavaScript 语法：</td><td><em>object</em>.style.position=”absolute”</td></tr></tbody></table><h2 id="position-属性的作用"><a href="#position-属性的作用" class="headerlink" title="position 属性的作用"></a>position 属性的作用</h2><p><code>position</code>属性用来指定一个元素在网页上的位置，一共有5种定位方式，即<code>position</code>属性主要有五个值。</p><blockquote><ul><li><code>static</code></li><li><code>relative</code></li><li><code>fixed</code></li><li><code>absolute</code></li><li><code>sticky</code></li></ul></blockquote><p>下面就依次介绍这五个值。最后一个<code>sticky</code>是2017年浏览器才支持的，本文将重点介绍。</p><h2 id="static-属性值"><a href="#static-属性值" class="headerlink" title="static 属性值"></a>static 属性值</h2><p><code>static</code>是<code>position</code>属性的默认值。如果省略<code>position</code>属性，浏览器就认为该元素是<code>static</code>定位。</p><p>这时，浏览器会按照源码的顺序，决定每个元素的位置，这称为”正常的页面流”（normal flow）。每个块级元素占据自己的区块（block），元素与元素之间不产生重叠，这个位置就是元素的默认位置。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111720.jpg" alt="img"></p><p>注意，<code>static</code>定位所导致的元素位置，是浏览器自主决定的，所以这时<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性无效。</p><h2 id="relative，absolute，fixed"><a href="#relative，absolute，fixed" class="headerlink" title="relative，absolute，fixed"></a>relative，absolute，fixed</h2><p><code>relative</code>、<code>absolute</code>、<code>fixed</code>这三个属性值有一个共同点，都是相对于某个基点的定位，不同之处仅仅在于基点不同。所以，只要理解了它们的基点是什么，就很容易掌握这三个属性值。</p><p>这三种定位都不会对其他元素的位置产生影响，因此元素之间可能产生重叠。</p><h3 id="relative-属性值"><a href="#relative-属性值" class="headerlink" title="relative 属性值"></a>relative 属性值</h3><p><code>relative</code>表示，相对于默认位置（即<code>static</code>时的位置）进行偏移，即定位基点是元素的默认位置。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111721.jpg" alt="img"></p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111722.jpg" alt="img"></p><p>它必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，用来指定偏移的方向和距离。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111723.jpg" alt="img"></p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>div</code>元素从默认位置向下偏移<code>20px</code>（即距离顶部<code>20px</code>）。</p><h3 id="absolute-属性值"><a href="#absolute-属性值" class="headerlink" title="absolute 属性值"></a>absolute 属性值</h3><p><code>absolute</code>表示，相对于上级元素（一般是父元素）进行偏移，即定位基点是父元素。</p><p>它有一个重要的限制条件：定位基点（一般是父元素）不能是<code>static</code>定位，否则定位基点就会变成整个网页的根元素<code>html</code>。另外，<code>absolute</code>定位也必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111801.jpg" alt="img"></p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  HTML 代码如下</span></span><br><span class="line"><span class="comment">  &lt;div id=&quot;father&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;div id=&quot;son&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">  positon: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，父元素是<code>relative</code>定位，子元素是<code>absolute</code>定位，所以子元素的定位基点是父元素，相对于父元素的顶部向下偏移<code>20px</code>。如果父元素是<code>static</code>定位，上例的子元素就是距离网页的顶部向下偏移<code>20px</code>。</p><p>注意，<code>absolute</code>定位的元素会被”正常页面流”忽略，即在”正常页面流”中，该元素所占空间为零，周边元素不受影响。</p><h3 id="fixed-属性值"><a href="#fixed-属性值" class="headerlink" title="fixed 属性值"></a>fixed 属性值</h3><p><code>fixed</code>表示，相对于视口（viewport，浏览器窗口）进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111802.jpg" alt="img"></p><p>它如果搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，表示元素的初始位置是基于视口计算的，否则初始位置就是元素的默认位置。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>div</code>元素始终在视口顶部，不随网页滚动而变化。</p><h2 id="sticky-属性值"><a href="#sticky-属性值" class="headerlink" title="sticky 属性值"></a>sticky 属性值</h2><p><code>sticky</code>跟前面四个属性值都不一样，它会产生动态效果，很像<code>relative</code>和<code>fixed</code>的结合：一些时候是<code>relative</code>定位（定位基点是自身默认位置），另一些时候自动变成<code>fixed</code>定位（定位基点是视口）。</p><p>因此，它能够形成”动态固定”的效果。比如，网页的搜索工具栏，初始加载时在自己的默认位置（<code>relative</code>定位）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111604.jpg" alt="img"></p><p>页面向下滚动时，工具栏变成固定位置，始终停留在页面头部（<code>fixed</code>定位）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111605.jpg" alt="img"></p><p>等到页面重新向上滚动回到原位，工具栏也会回到默认位置。</p><p><code>sticky</code>生效的前提是，必须搭配<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>这四个属性一起使用，不能省略，否则等同于<code>relative</code>定位，不产生”动态固定”的效果。原因是这四个属性用来定义”偏移距离”，浏览器把它当作<code>sticky</code>的生效门槛。</p><p>它的具体规则是，当页面滚动，父元素开始脱离视口时（即部分不可见），只要与<code>sticky</code>元素的距离达到生效门槛，<code>relative</code>定位自动切换为<code>fixed</code>定位；等到父元素完全脱离视口时（即完全不可见），<code>fixed</code>定位自动切换回<code>relative</code>定位。</p><p>请看下面的示例代码。（注意，除了已被淘汰的 IE 以外，其他浏览器目前都支持<code>sticky</code>。但是，Safari 浏览器需要加上浏览器前缀<code>-webkit-</code>。）</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toolbar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky; <span class="comment">/* safari 浏览器 */</span></span><br><span class="line">  <span class="attribute">position</span>: sticky; <span class="comment">/* 其他浏览器 */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，页面向下滚动时，<code>#toolbar</code>的父元素开始脱离视口，一旦视口的顶部与<code>#toolbar</code>的距离小于<code>20px</code>（门槛值），<code>#toolbar</code>就自动变为<code>fixed</code>定位，保持与视口顶部<code>20px</code>的距离。页面继续向下滚动，父元素彻底离开视口（即整个父元素完全不可见），<code>#toolbar</code>恢复成<code>relative</code>定位。</p><h2 id="sticky-的应用"><a href="#sticky-的应用" class="headerlink" title="sticky 的应用"></a>sticky 的应用</h2><p><code>sticky</code>定位可以实现一些很有用的效果。除了上面提到”动态固定”效果，这里再介绍两个。</p><h3 id="堆叠效果"><a href="#堆叠效果" class="headerlink" title="堆叠效果"></a>堆叠效果</h3><p>堆叠效果（stacking）指的是页面滚动时，下方的元素覆盖上方的元素。下面是一个图片堆叠的例子，下方的图片会随着页面滚动，覆盖上方的图片（查看 <a href="https://jsbin.com/fegiqoquki/edit?html,css,output">demo</a>）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111609.jpg" alt="img"></p><p>HTML 代码就是几张图片。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;img src=&quot;pic1.jpg&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;img src=&quot;pic2.jpg&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;img src=&quot;pic3.jpg&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></blockquote><p>CSS 代码极其简单，只要两行。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>它的原理是页面向下滚动时，每张图片都会变成<code>fixed</code>定位，导致后一张图片重叠在前一张图片上面。详细解释可以看<a href="https://dev.to/vinceumo/slide-stacking-effect-using-position-sticky-91f">这里</a>。</p><h3 id="表格的表头锁定"><a href="#表格的表头锁定" class="headerlink" title="表格的表头锁定"></a>表格的表头锁定</h3><p>大型表格滚动的时候，表头始终固定，也可以用<code>sticky</code>实现（查看 <a href="https://jsbin.com/decemanohe/edit?html,css,output">demo</a>）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019111610.jpg" alt="img"></p><p>CSS 代码也很简单。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>需要注意的是，<code>sticky</code>必须设在<code>&lt;th&gt;</code>元素上面，不能设在<code>&lt;thead&gt;</code>和<code>&lt;tr&gt;</code>元素，因为这两个元素没有<code>relative</code>定位，也就无法产生<code>sticky</code>效果。详细解释可以看<a href="https://css-tricks.com/position-sticky-and-table-headers/">这里</a>。</p><hr><p>浮动参考：</p><ul><li><p><a href="https://www.w3school.com.cn/cssref/pr_class_float.asp">W3school教程</a></p></li><li><p><a href="https://www2.jianshu.com/p/61a24d626af3">闰土在流浪（简书)</a></p></li></ul><p>定位参考：</p><ul><li><a href="https://www.w3school.com.cn/css/css_positioning_absolute.asp">W3school教程</a></li></ul><p>定位转载：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html">阮一峰大佬的博客</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/CSS/">CSS</category>
      
      
      <category domain="http://example.com/tags/CSS/">CSS</category>
      
      
      <comments>http://example.com/2023/03/26/CSS%E6%B5%AE%E5%8A%A8%E4%B8%8E%E5%AE%9A%E4%BD%8D/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS三大特性</title>
      <link>http://example.com/2023/03/26/CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <guid>http://example.com/2023/03/26/CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <pubDate>Sun, 26 Mar 2023 04:40:04 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;CSS三大特性&quot;&gt;&lt;a href=&quot;#CSS三大特性&quot; class=&quot;headerlink&quot; title=&quot;CSS三大特性&quot;&gt;&lt;/a&gt;CSS三大特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;层叠性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承性&lt;/s</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><ul><li><strong>层叠性</strong></li><li><strong>继承性</strong></li><li><strong>优先级</strong></li></ul><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><blockquote><p><strong>层叠性：就近原则</strong>  </p><ol><li><strong>样式冲突遵循的原则就是就近原则，那个样式离结构近，就执行那那个样式</strong></li><li><strong>同类种选择器,第二个选择器相同样式会覆盖第一个选择器</strong></li><li><strong>在同一个选择器中，相同的属性，以最后一个为准</strong></li><li><strong>主要解决样式冲突问题。</strong></li><li><strong>样式不冲突，不会叠加。</strong></li></ol></blockquote><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><blockquote><p><strong>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，子标签会继承父标签的某些此样式，如文本的颜色和字号。</strong></p><ul><li><strong>恰当的使用继承可以简化代码，降低CSS的复杂性。</strong></li><li><strong>子元素可以继承父元素的样式（text-,font-,line- 这些元素开头的可以继承，以及color属性）</strong></li></ul><p><strong>一，可以被继承的css属性</strong></p><ol><li><strong>字体系列属性:font、font-family、font-weight、font-size、fontstyle;</strong></li><li><strong>文本系列属性:</strong></li></ol><ul><li><strong>内联元素：color、line-height、word-spacing（设置单词之间的间距）、letter-spacing（设置文本字符间距）、 text-transform(用于设置文本的大小写：uppercase所有字符强制转为大写，lowercase转小写，capitalize首字符强制转为大写);</strong></li><li><strong>块级元素：text-indent、text-align;</strong></li></ul><ol start="3"><li><strong>元素可见性：visibility</strong></li><li><strong>表格布局属性：caption-side（标题位置）、border-collapse（设置边框分离还是合并）、border-spacing（边框分离状态下设置边框间距）、empty-cells（定义如何渲染无可视内容的单元格边框和背景）、table-layout（定义用于布局单元格行和列的算法）;</strong></li><li><strong>列表布局属性：list-style</strong></li></ol><p><strong>二，不可以被继承的css属性</strong></p><ol><li><strong>display：规定元素应该生成的框的类型；</strong></li><li><strong>文本属性：vertical-align、text-decoration(用于设置文本的修饰线外观包括上/下划线，管穿线，删除线，闪烁 );</strong></li><li><strong>盒子模型的属性：width、height、margin、border、padding;</strong></li><li><strong>背景属性：background、background-color、background-image;</strong></li><li><strong>定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、maxwidth、max-height、overflow、clip;</strong></li></ol></blockquote><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><blockquote><p><strong>当同一个元素指定多个选择器就会由优先级产生。</strong><br><strong>选择器相同，则执行层叠性。</strong><br><strong>选择器不同，则根据选择器权重执行</strong><br><strong>选择器权重：</strong></p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0,0,0,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>类选择器，伪类选择器</td><td>0,0,1,0</td></tr><tr><td>Id选择器</td><td>0,1,0,0</td></tr><tr><td>行内选择器 style=” “</td><td>1,0,0,0</td></tr><tr><td>!important  重要性</td><td>无穷大</td></tr></tbody></table><p><strong>注意点：</strong></p><p><strong>权重是由四组数字组成，但不会有进位。</strong><br><strong>可以理解为类选择器永远大于元素选择器，id选择器永远大于类选择器。</strong><br><strong>等级判断，从左向右，如果某一位数值相同，则判断下一位数值。</strong><br><strong>可以简单记忆法：通配符和继承权重为0，标签选择器为1，类(伪类)选择器10，id选择器为100，行类样式为1000，！important 无穷大。</strong><br><strong>继承的权重为0，如果该元素没有直接选中，不管父元素权重多高,子元素得到的权重都是0。</strong><br><strong>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重多高</strong></p><ul><li><strong>div  ul  li  ——&gt; 0,0,0,3</strong></li><li><strong>a:hover ——&gt;0,0,1,1</strong></li><li><strong>.nav ul li ——&gt;0,0,1,2</strong></li><li><strong>.nav a ——&gt; 0,0,1,1</strong></li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/CSS/">CSS</category>
      
      
      <category domain="http://example.com/tags/CSS/">CSS</category>
      
      
      <comments>http://example.com/2023/03/26/CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS选择器</title>
      <link>http://example.com/2023/03/26/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <guid>http://example.com/2023/03/26/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <pubDate>Sun, 26 Mar 2023 03:44:45 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;选择器分类&quot;&gt;&lt;a href=&quot;#选择器分类&quot; class=&quot;headerlink&quot; title=&quot;选择器分类&quot;&gt;&lt;/a&gt;选择器分类&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;简单选择器（根据名称、id、类来选取元素）&lt;/li&gt;
&lt;li&gt;组合器选择器（根</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h1><blockquote><ul><li>简单选择器（根据名称、id、类来选取元素）</li><li>组合器选择器（根据它们之间的特定关系来选取元素）</li><li>伪类选择器（根据特定状态选取元素）</li><li>伪元素选择器（选取元素的一部分并设置其样式）</li><li>属性选择器（根据属性或属性值来选取元素）</li></ul></blockquote><h2 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h2><h3 id="CSS-元素选择器"><a href="#CSS-元素选择器" class="headerlink" title="CSS 元素选择器"></a>CSS 元素选择器</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>在这里，页面上的所有 </p><p> 元素都将居中对齐，并带有红色文本颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-id-选择器"><a href="#CSS-id-选择器" class="headerlink" title="CSS id 选择器"></a>CSS id 选择器</h3><blockquote><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 <strong>“#”</strong> 来定义。</p><p>以下的样式规则应用于元素属性 id=”para1”:</p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#para1</span><br><span class="line">&#123;</span><br><span class="line">  text-<span class="attr">align</span>:center;</span><br><span class="line">  <span class="attr">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。</p></blockquote><h3 id="CSS-类选择器"><a href="#CSS-类选择器" class="headerlink" title="CSS 类选择器"></a>CSS 类选择器</h3><blockquote><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p><p>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点**”.”号**显示：</p><p>在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你也可以指定特定的HTML元素使用class。</p><p>在以下实例中, 所有的 p 元素使用 class=”center” 让该元素的文本居中:</p></blockquote><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：HTML 元素也可以引用多个类。</p></blockquote><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><blockquote><p>在这个例子中，</p><p> 元素将根据 class=”center” 和 class=”large” 进行样式设置：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;center large&quot;&gt;这个段落引用两个类。&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>类名不能以数字开头！</p></blockquote><h3 id="CSS-通用选择器"><a href="#CSS-通用选择器" class="headerlink" title="CSS 通用选择器"></a>CSS 通用选择器</h3><blockquote><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><blockquote><p>下面的 CSS 规则会影响页面上的每个 HTML 元素：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-分组选择器"><a href="#CSS-分组选择器" class="headerlink" title="CSS 分组选择器"></a>CSS 分组选择器</h3><blockquote><p>分组选择器是元素选择器的衍生。</p><p>元素选择器：</p></blockquote><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分组选择器，顾名思义就是将元素选择器选择的元素进行分组，上面的代码片段，因为想要三个元素的样式都相同，我们可以用分组选择器来这么写：</p></blockquote><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样不仅实现了效果更简化了，代码片段。</p></blockquote><h3 id="所有简单的-CSS-选择器"><a href="#所有简单的-CSS-选择器" class="headerlink" title="所有简单的 CSS 选择器"></a>所有简单的 CSS 选择器</h3><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left">.class (类选择器)</td><td align="left">.intro { //style}</td><td align="left">选取所有 class=”intro” 的元素。</td></tr><tr><td align="left">#id (id选择器)</td><td align="left">#firstname { //style}</td><td align="left">选取 id=”firstname” 的那个元素。</td></tr><tr><td align="left">* (通用选择器)</td><td align="left">*  { //style}</td><td align="left">选取所有元素。</td></tr><tr><td align="left">element (元素选择器)</td><td align="left">p  { //style}</td><td align="left">选取所有 <p> 元素。</p></td></tr><tr><td align="left">element*,*element,.. (分组选择器)</td><td align="left">iv, p  { //style}</td><td align="left">选取所有 <div> 元素和所有 <p> 元素。</p></div></td></tr></tbody></table><h2 id="CSS-组合器"><a href="#CSS-组合器" class="headerlink" title="CSS 组合器"></a>CSS 组合器</h2><blockquote><p>在 CSS3 中包含了四种组合方式:</p><p>•后代选择器(以空格   分隔)</p><p>•子元素选择器(以大于 &gt; 号分隔）</p><p>•相邻兄弟选择器（以加号 + 分隔）</p><p>•普通兄弟选择器（以波浪号 ～ 分隔）</p></blockquote><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><blockquote><p>后代选择器匹配属于指定元素后代的所有元素。</p><p>下面的例子选择 <div> 元素内的所有 <p> 元素：</p></div></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>后代选择器匹配作为指定元素后代的所有元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> //我有效果</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//我有效果</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>//我有效果</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 5。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><blockquote><p>与后代选择器相比，它只能选择作为某元素**<code>直接/一级子元素</code>**的元素。</p><p>以下实例选择了<div>元素中所有直接子元素 <p> ：</p></div></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;子选择器&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;子选择器 (&gt;) 选择属于指定元素子元素的所有元素。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;<span class="selector-tag">div</span> 中的段落 <span class="number">1</span>。&lt;/<span class="selector-tag">p</span>&gt; //我有效果</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;<span class="selector-tag">div</span> 中的段落 <span class="number">2</span>。&lt;/<span class="selector-tag">p</span>&gt; //我有效果</span><br><span class="line">  &lt;<span class="selector-tag">section</span>&gt;&lt;<span class="selector-tag">p</span>&gt;<span class="selector-tag">div</span> 中的段落 <span class="number">3</span>。&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">section</span>&gt; &lt;!-- 非子但属后代 --&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;<span class="selector-tag">div</span> 中的段落 <span class="number">4</span>。&lt;/<span class="selector-tag">p</span>&gt; //我有效果</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;段落 <span class="number">5</span>。不在 <span class="selector-tag">div</span> 中。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;段落 <span class="number">6</span>。不在 <span class="selector-tag">div</span> 中。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><blockquote><p>相邻兄弟选择器匹配所有作为指定元素的相邻同级的元素。</p><p>兄弟（同级）元素必须具有相同的父元素，“相邻”的意思是“紧随其后”的第一个元素。</p><p>相邻兄弟选择器：可选择紧接在另一元素后的元素，且二者有相同父元素。</p><p>以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素:</p></div></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>相邻兄弟选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>相邻的同胞选择器（+）选择所有作为指定元素的相邻的同级元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>div 中的段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> //只有我有效果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。不在 div 中。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后续-通用-兄弟选择器"><a href="#后续-通用-兄弟选择器" class="headerlink" title="后续(通用)兄弟选择器"></a>后续(通用)兄弟选择器</h3><blockquote><p>后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。</p><p>以下实例选取了所有 <div> 元素之后的<strong>所有相邻兄弟</strong>元素 <p> : </p></div></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>通用兄弟选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>通用的兄弟选择器（~）选择指定元素的所有同级元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 1。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 2。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>一些代码。<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落 4。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="所有-CSS-组合选择器"><a href="#所有-CSS-组合选择器" class="headerlink" title="所有 CSS 组合选择器"></a>所有 CSS 组合选择器</h3><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">示例描述</th></tr></thead><tbody><tr><td align="left">element  element（后代选择器）</td><td align="left">div p {//style}</td><td align="left">选择 <div> 元素内的所有 <p> 元素。</p></div></td></tr><tr><td align="left">element&gt;element （子选择器）</td><td align="left">div &gt; p{//style}</td><td align="left">选择其父元素是 <div> 元素的所有 <p> 元素。</p></div></td></tr><tr><td align="left">element*+*element（相邻兄弟选择器）</td><td align="left">div + p{//style}</td><td align="left">选择所有紧随 <div> 元素之后的 <p> 元素。</p></div></td></tr><tr><td align="left">element1~element2（后续(通用)兄弟选择器）</td><td align="left">p ~ ul{//style}</td><td align="left">选择前面有 <p> 元素的每个 <ul> 元素。</ul></p></td></tr></tbody></table><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="伪类的语法"><a href="#伪类的语法" class="headerlink" title="伪类的语法"></a>伪类的语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector:pseudo-class &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CSS类也可以使用伪类：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector<span class="selector-class">.class</span>:pseudo-class &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在支持 CSS 的浏览器中，链接的不同状态都可以以不同的方式显示</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>:<span class="number">#00FF00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#FF00FF</span>;&#125; <span class="comment">/* 鼠标划过链接 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125; <span class="comment">/* 已选中的链接 */</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： </p><p>•在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p><p>•在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><p>•伪类的名称不区分大小写。</p></blockquote><blockquote><p>伪类可以与 CSS 类配合使用：</p></blockquote><h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.red:visited &#123;color:#FF0000;&#125;</span><br><span class="line"></span><br><span class="line">&lt;a class=&quot;red&quot; href=&quot;css-syntax.html&quot;&gt;CSS 语法&lt;/a&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果在上面的例子的链接已被访问，它会显示为红色。</p></blockquote><h3 id="伪类-——-first-child伪类"><a href="#伪类-——-first-child伪类" class="headerlink" title="伪类 —— :first-child伪类"></a>伪类 —— :first-child伪类</h3><blockquote><p><strong>使用 :first-child 伪类来选择父元素的第一个子元素。</strong></p><p>注意：在IE8的之前版本必须声明&lt;!DOCTYPE&gt; ，这样 :first-child 才能生效。</p><p>匹配作为任何元素的第一个子元素的 </p><p> 元素：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">color</span>:blue;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>匹配所有 </p><p> 元素中的首个 <i> 元素</i></p><p>在下面的例子中，选择器匹配所有 </p><p> 元素中的第一个 <i> 元素：被选中的是i标签</i></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> <span class="selector-tag">i</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个<span class="tag">&lt;<span class="name">i</span>&gt;</span>`强壮`<span class="tag">&lt;/<span class="name">i</span>&gt;</span>的男人。我是一个<span class="tag">&lt;<span class="name">i</span>&gt;</span>强壮<span class="tag">&lt;/<span class="name">i</span>&gt;</span>的男人。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个<span class="tag">&lt;<span class="name">i</span>&gt;</span>`强壮`<span class="tag">&lt;/<span class="name">i</span>&gt;</span>的男人。我是一个<span class="tag">&lt;<span class="name">i</span>&gt;</span>强壮<span class="tag">&lt;/<span class="name">i</span>&gt;</span>的男人。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>匹配所有首个 </p><p> 元素中的所有 <i> 元素</i></p><p>在下面的例子中，选择器匹配作为另一个元素的第一个子元素的 </p><p> 元素中的所有 <i> 元素：被选中的是p标签</i></p></blockquote><h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">p:first-child i &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我是一个&lt;i&gt;`强壮`&lt;/i&gt;的男人。我是一个&lt;i&gt;`强壮`&lt;/i&gt;的男人。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我是一个&lt;i&gt;强壮&lt;/i&gt;的男人。我是一个&lt;i&gt;强壮&lt;/i&gt;的男人。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS-lang-伪类"><a href="#CSS-lang-伪类" class="headerlink" title="CSS - :lang 伪类"></a>CSS - :lang 伪类</h3><blockquote><p><code>:lang</code> 伪类允许您为不同的语言定义特殊的规则。</p><p>在下面的例子中，<code>:lang</code> 为属性为 lang=”en” 的 <q> 元素定义引号：</q></p></blockquote><h4 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">q</span><span class="selector-pseudo">:lang</span>(en) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">quotes</span>: <span class="string">&quot;~&quot;</span> <span class="string">&quot;~&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text <span class="tag">&lt;<span class="name">q</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>A quote in a paragraph<span class="tag">&lt;/<span class="name">q</span>&gt;</span> Some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在本例中，:lang 为 lang=&quot;en&quot; 的 q 元素定义引号：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Some text~A quote in a paragraph~Some text.</span><br><span class="line"></span><br><span class="line">在本例中，:lang 为 lang=&quot;en&quot; 的 q 元素定义引号：</span><br></pre></td></tr></table></figure><h3 id="所有-CSS-伪类"><a href="#所有-CSS-伪类" class="headerlink" title="所有 CSS 伪类"></a>所有 CSS 伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_active.asp">:active</a></td><td align="left">a:active</td><td align="left">选择活动的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_checked.asp">:checked</a></td><td align="left">input:checked</td><td align="left">选择每个被选中的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_disabled.asp">:disabled</a></td><td align="left">input:disabled</td><td align="left">选择每个被禁用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_empty.asp">:empty</a></td><td align="left">p:empty</td><td align="left">选择没有子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_enabled.asp">:enabled</a></td><td align="left">input:enabled</td><td align="left">选择每个已启用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-child.asp">:first-child</a></td><td align="left">p:first-child</td><td align="left">选择作为其父的首个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-of-type.asp">:first-of-type</a></td><td align="left">p:first-of-type</td><td align="left">选择作为其父的首个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_focus.asp">:focus</a></td><td align="left">input:focus</td><td align="left">选择获得焦点的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_hover.asp">:hover</a></td><td align="left">a:hover</td><td align="left">选择鼠标悬停其上的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_in-range.asp">:in-range</a></td><td align="left">input:in-range</td><td align="left">选择具有指定范围内的值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_invalid.asp">:invalid</a></td><td align="left">input:invalid</td><td align="left">选择所有具有无效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_lang.asp">:lang(<em>language</em>)</a></td><td align="left">p:lang(it)</td><td align="left">选择每个 lang 属性值以 “it” 开头的 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-child.asp">:last-child</a></td><td align="left">p:last-child</td><td align="left">选择作为其父的最后一个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-of-type.asp">:last-of-type</a></td><td align="left">p:last-of-type</td><td align="left">选择作为其父的最后一个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td><td align="left">a:link</td><td align="left">选择所有未被访问的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_not.asp">:not(<em>selector</em>)</a></td><td align="left">:not(p)</td><td align="left">选择每个非 <p> 元素的元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-child.asp">:nth-child(<em>n</em>)</a></td><td align="left">p:nth-child(2)</td><td align="left">选择作为其父的第二个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-child.asp">:nth-last-child(<em>n</em>)</a></td><td align="left">p:nth-last-child(2)</td><td align="left">选择作为父的第二个子元素的每个<p>元素，从最后一个子元素计数。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp">:nth-last-of-type(<em>n</em>)</a></td><td align="left">p:nth-last-of-type(2)</td><td align="left">选择作为父的第二个<p>元素的每个</p><p>元素，从最后一个子元素计数</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-of-type.asp">:nth-of-type(<em>n</em>)</a></td><td align="left">p:nth-of-type(2)</td><td align="left">选择作为其父的第二个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-of-type.asp">:only-of-type</a></td><td align="left">p:only-of-type</td><td align="left">选择作为其父的唯一 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-child.asp">:only-child</a></td><td align="left">p:only-child</td><td align="left">选择作为其父的唯一子元素的 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_optional.asp">:optional</a></td><td align="left">input:optional</td><td align="left">选择不带 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_out-of-range.asp">:out-of-range</a></td><td align="left">input:out-of-range</td><td align="left">选择值在指定范围之外的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-only.asp">:read-only</a></td><td align="left">input:read-only</td><td align="left">选择指定了 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-write.asp">:read-write</a></td><td align="left">input:read-write</td><td align="left">选择不带 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_required.asp">:required</a></td><td align="left">input:required</td><td align="left">选择指定了 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_root.asp">:root</a></td><td align="left">root</td><td align="left">选择元素的根元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_target.asp">:target</a></td><td align="left">#news:target</td><td align="left">选择当前活动的 #news 元素（单击包含该锚名称的 URL）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_valid.asp">:valid</a></td><td align="left">input:valid</td><td align="left">选择所有具有有效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_visited.asp">:visited</a></td><td align="left">a:visited</td><td align="left">选择所有已访问的链接。</td></tr></tbody></table><h3 id="所有-CSS-伪元素"><a href="#所有-CSS-伪元素" class="headerlink" title="所有 CSS 伪元素"></a>所有 CSS 伪元素</h3><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_after.asp">::after</a></td><td align="left">p::after</td><td align="left">在每个 <p> 元素之后插入内容。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_before.asp">::before</a></td><td align="left">p::before</td><td align="left">在每个 <p> 元素之前插入内容。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-letter.asp">::first-letter</a></td><td align="left">p::first-letter</td><td align="left">选择每个 <p> 元素的首字母。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-line.asp">::first-line</a></td><td align="left">p::first-line</td><td align="left">选择每个 <p> 元素的首行。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_selection.asp">::selection</a></td><td align="left">p::selection</td><td align="left">选择用户选择的元素部分</td></tr></tbody></table><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><blockquote><p>什么是伪元素？</p><p>CSS 伪元素用于设置元素指定部分的样式。</p><p>例如，它可用于：</p><ul><li>设置元素的首字母、首行的样式</li><li>在元素的内容之前或之后插入内容</li></ul><p>伪元素的语法：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector::pseudo-element &#123;property:value;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CSS类也可以使用伪元素：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector<span class="selector-class">.class</span>::pseudo-element &#123;property:value;&#125;</span><br></pre></td></tr></table></figure><h3 id="first-line-伪元素"><a href="#first-line-伪元素" class="headerlink" title="::first-line 伪元素"></a>::first-line 伪元素</h3><blockquote><p><code>::first-line</code> 伪元素用于向文本的首行添加特殊样式。</p><p>下面的例子为所有 </p><p> 元素中的首行添加样式：</p></blockquote><h4 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><code>::first-line</code> 伪元素只能应用于块级元素。</p><p>以下属性适用于 <code>::first-line</code> 伪元素：</p><ul><li>字体属性</li><li>颜色属性</li><li>背景属性</li><li>word-spacing</li><li>letter-spacing</li><li>text-decoration</li><li>vertical-align</li><li>text-transform</li><li>line-height</li><li>clear</li></ul><p>请注意<em>双冒号表示法</em> - <code>::first-line</code> 对比 <code>:first-line</code></p><p>在 CSS3 中，双冒号取代了伪元素的单冒号表示法。这是 W3C 试图区分<em>伪类</em>和<em>伪元素</em>的尝试。</p><p>在 CSS2 和 CSS1 中，伪类和伪元素都使用了单冒号语法。</p><p>为了向后兼容，CSS2 和 CSS1 伪元素可接受单冒号语法。</p></blockquote><h3 id="first-letter-伪元素"><a href="#first-letter-伪元素" class="headerlink" title="::first-letter 伪元素"></a>::first-letter 伪元素</h3><blockquote><p><code>::first-letter</code> 伪元素用于向文本的首字母添加特殊样式。</p><p>下面的例子设置所有 </p><p> 元素中文本的首字母格式：</p></blockquote><h4 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p::first-letter &#123;</span><br><span class="line">  color: #ff0000;</span><br><span class="line">  font-size: xx-large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪元素和-CSS-类"><a href="#伪元素和-CSS-类" class="headerlink" title="伪元素和 CSS 类"></a>伪元素和 CSS 类</h3><blockquote><p>伪元素可以与 CSS 类结合使用：</p></blockquote><h4 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.intro</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子将以红色和较大的字体显示 class=”intro” 的段落的首字母。</p></blockquote><h3 id="多个伪元素"><a href="#多个伪元素" class="headerlink" title="多个伪元素"></a>多个伪元素</h3><blockquote><p>也可以组合几个伪元素。</p><p>在下面的例子中，段落的第一个字母将是红色，字体大小为 xx-large。第一行的其余部分将变为蓝色，并使用小型大写字母。该段的其余部分将是默认的字体大小和颜色：</p></blockquote><h4 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: xx-large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-before-伪元素"><a href="#CSS-before-伪元素" class="headerlink" title="CSS - ::before 伪元素"></a>CSS - ::before 伪元素</h3><blockquote><p><code>::before</code> 伪元素可用于在元素内容之前插入一些内容。</p><p>下面的例子在每个 &lt;h1&gt; 元素的内容之前插入一幅图像：</p></blockquote><h4 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1::before &#123;</span><br><span class="line">  content: url(smiley.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-after-伪元素"><a href="#CSS-after-伪元素" class="headerlink" title="CSS - ::after 伪元素"></a>CSS - ::after 伪元素</h3><blockquote><p><code>::after</code> 伪元素可用于在元素内容之后插入一些内容。</p><p>下面的例子在每个&lt;h1&gt; 元素的内容之后插入一幅图像：</p></blockquote><h4 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1::after &#123;</span><br><span class="line">  content: url(smiley.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-selection-伪元素"><a href="#CSS-selection-伪元素" class="headerlink" title="CSS - ::selection 伪元素"></a>CSS - ::selection 伪元素</h3><blockquote><p><code>::selection</code> 伪元素匹配用户选择的元素部分。</p><p>以下 CSS 属性可以应用于 <code>::selection</code>：</p><ul><li><code>color</code></li><li><code>background</code></li><li><code>cursor</code></li><li><code>outline</code></li></ul><p>下例使所选文本在黄色背景上显示为红色：</p></blockquote><h4 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">  color: red; </span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="所有-CSS-伪元素-1"><a href="#所有-CSS-伪元素-1" class="headerlink" title="所有 CSS 伪元素"></a>所有 CSS 伪元素</h3><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_after.asp">::after</a></td><td align="left">p::after</td><td align="left">在每个 <p> 元素之后插入内容。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_before.asp">::before</a></td><td align="left">p::before</td><td align="left">在每个 <p> 元素之前插入内容。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-letter.asp">::first-letter</a></td><td align="left">p::first-letter</td><td align="left">选择每个 <p> 元素的首字母。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-line.asp">::first-line</a></td><td align="left">p::first-line</td><td align="left">选择每个 <p> 元素的首行。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_selection.asp">::selection</a></td><td align="left">p::selection</td><td align="left">选择用户选择的元素部分。</td></tr></tbody></table><h3 id="所有-CSS-伪类-1"><a href="#所有-CSS-伪类-1" class="headerlink" title="所有 CSS 伪类"></a>所有 CSS 伪类</h3><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_active.asp">:active</a></td><td align="left">a:active</td><td align="left">选择活动的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_checked.asp">:checked</a></td><td align="left">input:checked</td><td align="left">选择每个被选中的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_disabled.asp">:disabled</a></td><td align="left">input:disabled</td><td align="left">选择每个被禁用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_empty.asp">:empty</a></td><td align="left">p:empty</td><td align="left">选择没有子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_enabled.asp">:enabled</a></td><td align="left">input:enabled</td><td align="left">选择每个已启用的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-child.asp">:first-child</a></td><td align="left">p:first-child</td><td align="left">选择作为其父的首个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-of-type.asp">:first-of-type</a></td><td align="left">p:first-of-type</td><td align="left">选择作为其父的首个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_focus.asp">:focus</a></td><td align="left">input:focus</td><td align="left">选择获得焦点的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_hover.asp">:hover</a></td><td align="left">a:hover</td><td align="left">选择鼠标悬停其上的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_in-range.asp">:in-range</a></td><td align="left">input:in-range</td><td align="left">选择具有指定范围内的值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_invalid.asp">:invalid</a></td><td align="left">input:invalid</td><td align="left">选择所有具有无效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_lang.asp">:lang(<em>language</em>)</a></td><td align="left">p:lang(it)</td><td align="left">选择每个 lang 属性值以 “it” 开头的 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-child.asp">:last-child</a></td><td align="left">p:last-child</td><td align="left">选择作为其父的最后一个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-of-type.asp">:last-of-type</a></td><td align="left">p:last-of-type</td><td align="left">选择作为其父的最后一个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td><td align="left">a:link</td><td align="left">选择所有未被访问的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_not.asp">:not(<em>selector</em>)</a></td><td align="left">:not(p)</td><td align="left">选择每个非 <p> 元素的元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-child.asp">:nth-child(<em>n</em>)</a></td><td align="left">p:nth-child(2)</td><td align="left">选择作为其父的第二个子元素的每个 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-child.asp">:nth-last-child(<em>n</em>)</a></td><td align="left">p:nth-last-child(2)</td><td align="left">选择作为父的第二个子元素的每个<p>元素，从最后一个子元素计数。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp">:nth-last-of-type(<em>n</em>)</a></td><td align="left">p:nth-last-of-type(2)</td><td align="left">选择作为父的第二个<p>元素的每个</p><p>元素，从最后一个子元素计数</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-of-type.asp">:nth-of-type(<em>n</em>)</a></td><td align="left">p:nth-of-type(2)</td><td align="left">选择作为其父的第二个 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-of-type.asp">:only-of-type</a></td><td align="left">p:only-of-type</td><td align="left">选择作为其父的唯一 <p> 元素的每个 </p><p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-child.asp">:only-child</a></td><td align="left">p:only-child</td><td align="left">选择作为其父的唯一子元素的 <p> 元素。</p></td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_optional.asp">:optional</a></td><td align="left">input:optional</td><td align="left">选择不带 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_out-of-range.asp">:out-of-range</a></td><td align="left">input:out-of-range</td><td align="left">选择值在指定范围之外的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-only.asp">:read-only</a></td><td align="left">input:read-only</td><td align="left">选择指定了 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-write.asp">:read-write</a></td><td align="left">input:read-write</td><td align="left">选择不带 “readonly” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_required.asp">:required</a></td><td align="left">input:required</td><td align="left">选择指定了 “required” 属性的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_root.asp">:root</a></td><td align="left">root</td><td align="left">选择元素的根元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_target.asp">:target</a></td><td align="left">#news:target</td><td align="left">选择当前活动的 #news 元素（单击包含该锚名称的 URL）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_valid.asp">:valid</a></td><td align="left">input:valid</td><td align="left">选择所有具有有效值的 <input> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_visited.asp">:visited</a></td><td align="left">a:visited</td><td align="left">选择所有已访问的链接。</td></tr></tbody></table><h2 id="属性选择器（CSS3新增）"><a href="#属性选择器（CSS3新增）" class="headerlink" title="属性选择器（CSS3新增）"></a>属性选择器（CSS3新增）</h2><blockquote><p>属性选择器是基于属性来定位一个元素。可以指定该元素的某个属性，这样所有使用该属性的元素都将被定位。</p><p>属性选择器有如下五种：(CSS3新增三个)</p></blockquote><h3 id="所有-CSS-属性选择器"><a href="#所有-CSS-属性选择器" class="headerlink" title="所有 CSS 属性选择器"></a>所有 CSS 属性选择器</h3><table><thead><tr><th><strong>属性名称</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>[att^=”value”]</td><td>该属性的值以指定的值开始  (新增)</td></tr><tr><td>[att$=”value”]</td><td>该属性的值以指定的值结束  (新增)</td></tr><tr><td>[att*=”value”]</td><td>该属性的值包含指定的值，<strong>无论其位置</strong>  (新增)</td></tr><tr><td>[att~=”value”]</td><td>该属性的值包含指定的值（value为完整单词）</td></tr><tr><td>[att|=”value”]</td><td>该属性的值必须为指定的值（或者以  - 分隔开）</td></tr></tbody></table><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute.asp"><em>attribute</em>]</a></td><td align="left">[target]</td><td align="left">选择带有 target 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp"><em>attribute</em>=<em>value</em>]</a></td><td align="left">[target=_blank]</td><td align="left">选择带有 target=”_blank” 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp"><em>attribute</em>~=<em>value</em>]</a></td><td align="left">[title~=flower]</td><td align="left">选择带有包含 “flower” 一词的 title 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp"><em>attribute</em>|=<em>value</em>]</a></td><td align="left">[lang|=en]</td><td align="left">选择带有以 “en” 开头的 lang 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_begin.asp"><em>attribute</em>^=<em>value</em>]</a></td><td align="left">a[href^=”https”]</td><td align="left">选择其 href 属性值以 “https” 开头的每个 <a> 元素。</a></td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_end.asp"><em>attribute</em>$=<em>value</em>]</a></td><td align="left">a[href$=”.pdf”]</td><td align="left">选择其 href 属性值以 “.pdf” 结尾的每个 <a> 元素。</a></td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_contain.asp"><em>attribute</em>*=<em>value</em>]</a></td><td align="left">a[href*=”w3school”]</td><td align="left">选择其 href 属性值包含子串 “w3school” 的每个 <a> 元素。</a></td></tr></tbody></table><h3 id="CSS-attribute-选择器"><a href="#CSS-attribute-选择器" class="headerlink" title="CSS [attribute] 选择器"></a>CSS [attribute] 选择器</h3><blockquote><p>[attribute] 选择器用于选取带有指定属性的元素。</p><p>下例选择所有带有 target 属性的 <a> 元素；</a></p></blockquote><h4 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-attribute-”value”-选择器"><a href="#CSS-attribute-”value”-选择器" class="headerlink" title="CSS [attribute=”value”] 选择器"></a>CSS [attribute=”value”] 选择器</h3><blockquote><p>[attribute=”value”] 选择器用于选取带有指定属性和值的元素。</p><p>下例选取所有带有 target=”_blank” 属性的 <a> 元素：</a></p></blockquote><h4 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target=<span class="string">&quot;_blank&quot;</span>]</span> &#123; </span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-attribute-”value”-选择器-1"><a href="#CSS-attribute-”value”-选择器-1" class="headerlink" title="CSS [attribute~=”value”] 选择器"></a>CSS [attribute~=”value”] 选择器</h3><blockquote><p>[attribute~=”value”] 选择器选取属性值包含指定词的元素。</p><p>下例选取 title 属性包含 “flower” 单词的所有元素：</p></blockquote><h4 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title~=<span class="string">&quot;flower&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子会匹配以下属性的元素：title=”flower”、title=”summer flower” 以及 title=”flower new”，但不匹配：title=”my-flower” 或 title=”flowers”。</p></blockquote><h3 id="CSS-attribute-”value”-选择器-2"><a href="#CSS-attribute-”value”-选择器-2" class="headerlink" title="CSS [attribute|=”value”] 选择器"></a>CSS [attribute|=”value”] 选择器</h3><blockquote><p>[attribute|=”value”] 选择器用于选取指定属性以指定值开头的元素。</p><p>下例选取 class 属性以 “top” 开头的所有元素：</p><p><strong>注释：</strong>值必须是完整或单独的单词，比如 class=”top” 或者后跟连字符的，比如 class=”top-text”。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class|=<span class="string">&quot;top&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[class|=top]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS [attribute|=&quot;value&quot;] 选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;top-header&quot;</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//有效果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;top-text&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//有效果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;topcontent&quot;</span>&gt;</span>Are you learning CSS?<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//无效果</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-attribute-”value”-选择器-3"><a href="#CSS-attribute-”value”-选择器-3" class="headerlink" title="CSS [attribute^=”value”] 选择器"></a>CSS [attribute^=”value”] 选择器</h3><blockquote><p>[attribute^=”value”] 选择器用于选取指定属性以指定值开头的元素。</p><p>下例选取 class 属性以 “top” 开头的所有元素：</p><p><strong>提示：</strong>值不必是完整单词！</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class^=<span class="string">&quot;top&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[class^=<span class="string">&quot;top&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS [attribute^=&quot;value&quot;] 选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;top-header&quot;</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//有效果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;top-text&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//有效果</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;topcontent&quot;</span>&gt;</span>Are you learning CSS?<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//有效果</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-attribute-”value”-选择器-4"><a href="#CSS-attribute-”value”-选择器-4" class="headerlink" title="CSS [attribute$=”value”] 选择器"></a>CSS [attribute$=”value”] 选择器</h3><blockquote><p>[attribute$=”value”] 选择器用于选取指定属性以指定值结尾的元素。</p><p>下例选取 class 属性以 “test” 结尾的所有元素：</p><p><strong>提示：</strong>值不必是完整单词！</p></blockquote><h4 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class$=<span class="string">&quot;test&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-attribute-”value”-选择器-5"><a href="#CSS-attribute-”value”-选择器-5" class="headerlink" title="CSS [attribute*=”value”] 选择器"></a>CSS [attribute*=”value”] 选择器</h3><blockquote><p>[attribute*=”value”] 选择器选取属性值包含指定词的元素。</p><p>下例选取 class 属性包含 “te” 的所有元素：</p><p><strong>提示：</strong>值不必是完整单词！</p></blockquote><h4 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;te&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置表单样式"><a href="#设置表单样式" class="headerlink" title="设置表单样式"></a>设置表单样式</h3><blockquote><p>若需为不带 class 或 id 的表单设置样式，属性选择器会很有用：</p></blockquote><h4 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/CSS/">CSS</category>
      
      
      <category domain="http://example.com/tags/CSS/">CSS</category>
      
      
      <comments>http://example.com/2023/03/26/CSS%E9%80%89%E6%8B%A9%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>浅谈JavaScript中的闭包</title>
      <link>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</link>
      <guid>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</guid>
      <pubDate>Wed, 22 Mar 2023 11:46:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;浅谈JavaScript中的闭包&quot;&gt;&lt;a href=&quot;#浅谈JavaScript中的闭包&quot; class=&quot;headerlink&quot; title=&quot;浅谈JavaScript中的闭包&quot;&gt;&lt;/a&gt;浅谈JavaScript中的闭包&lt;/h1&gt;&lt;h2 id=&quot;简述闭包&quot;&gt;&lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="浅谈JavaScript中的闭包"><a href="#浅谈JavaScript中的闭包" class="headerlink" title="浅谈JavaScript中的闭包"></a>浅谈JavaScript中的闭包</h1><h2 id="简述闭包"><a href="#简述闭包" class="headerlink" title="简述闭包"></a>简述闭包</h2><blockquote><p>谈及闭包，每个人都有不同的理解，“一千个读者眼中就会有一千个哈姆雷特。”。笔者认为，简述闭包就是，让开发者可以从内部函数访问外部函数的作用域，即使在父函数关闭之后。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器目前是 3 </span></span><br></pre></td></tr></table></figure><blockquote><p>看明白了吗？如果没有的话，让我们重头来过。</p></blockquote><h2 id="解释引例1"><a href="#解释引例1" class="headerlink" title="解释引例1"></a>解释引例1</h2><blockquote><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>我们知道，在JavaScript中，函数能够访问<code>内部</code>定义的所有变量：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>也能够访问函数<code>外部</code>定义的变量:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>在最后这个例子中，<code>a</code> 是<code>全局</code>变量。</p><p>在网页中，全局变量属于 window 对象。</p><p>全局变量能够被页面中（以及窗口中）的所有脚本使用和修改。</p><p>在第一个例子中，<code>a</code> 是<code>局部</code>变量。</p><p>局部变量只能用于其被定义的函数内部。对于其他函数和脚本代码来说它是不可见的。</p><p>拥有相同名称的全局变量和局部变量是不同的变量。修改一个，不会改变其他。</p><p><code>不通过</code>关键词 <code>var</code> 创建的变量总是全局的，即使它们在函数中创建(即<code>变量提升</code>）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时，x相当于全局变量。</p></blockquote><hr><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p>全局变量活得和您的应用程序（窗口、网页）一样久。</p><p>局部变量活得不长。它们在函数调用时创建，在函数完成后被删除。</p><hr><h2 id="解释引例2"><a href="#解释引例2" class="headerlink" title="解释引例2"></a>解释引例2</h2><blockquote><p>假设您想使用变量来计数，并且您希望此计数器可用于所有函数。</p><p>您可以使用全局变量和函数来递增计数器：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化计数器</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递增计数器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用三次 add()</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时计数器应该是 3</span></span><br></pre></td></tr></table></figure><blockquote><p>但是这个计数器存在一些问题，我们可以通过其他方式改变<code>counter</code>的值不一定需要通过<code>add()</code>方法，又或者说，这个全局变量<code>counter</code>会受到其他函数或者方法的影响而改变，这时我<code>add()</code>方法统计出来的<code>counter</code>的值，可能不是正确的结果，为了解决这个问题，我们把变量定义移到<code>add()</code>方法内部:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递增计数器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>; </span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用三次 add()</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时计数器应该是 3。但它是 1。</span></span><br></pre></td></tr></table></figure><blockquote><p>此时<code>counter</code>为方法内的局部变量，不会受到其他函数或者方法的影响，但是，我们发现，实际上，输出的并不是我们想要的结果。因为每一次执行<code>add</code>方法时，<code>counter</code>都会被置0。</p><p>实际上我们想要的结果是：在开始时，<code>counter</code>初始化为0，此后不再执行置0操作，但是每次都会执行<code>+1</code>操作。那怎么办呢？我们可以这样实现：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第一次调用 counter值为1</span></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第二次调用 counter值为2</span></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第三次调用 counter值为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器目前是 3 </span></span><br></pre></td></tr></table></figure><blockquote><p>我们定义了一个<code>add</code>变量，让它等于一个自调用函数:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)() <span class="comment">//自调用函数格式</span></span><br></pre></td></tr></table></figure><blockquote><p>那么我们来解释一下，上述代码片段：</p><p><strong>第一次</strong>调用<code>add</code>方法时，会按照从上到下执行，<code>counter</code>初始化为<code>0</code>，然后<code>counter</code> = <code>counter</code> + 1,所以第一次结果输出为1</p><p><strong>第二次</strong>调用<code>add</code>方法，注意这里因为第一次调用时返回给我们的是<code>return function () &#123;return counter += 1;&#125;</code>所以此时实际上<code>add</code>长这样：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add =<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>; &#125; <span class="comment">//couter值为1</span></span><br></pre></td></tr></table></figure><blockquote><p>因为我们并没有去执行第一个匿名函数，所以<code>counter</code>值并没有置0，仍然为我们之前改变的1</p><p>此时<code>counter = counter(1) + 1</code>为2</p><p><strong>第三次</strong>也可以这么理解。</p><p>上述代码片段也可以改写成：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>   <span class="keyword">function</span> <span class="title function_">incrementCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">counter</span>();</span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>我们通过计数器的例子，实实在在的访问并改变了外部函数的变量，除了第一次调用过这个函数之外。后续的每一次变量的访问和改变我们都没有访问外部函数。这就是闭包的经典案列。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript中的indexOf()方法</title>
      <link>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/</link>
      <guid>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Wed, 22 Mar 2023 09:40:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript中的indexOf-方法&quot;&gt;&lt;a href=&quot;#JavaScript中的indexOf-方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的indexOf()方法&quot;&gt;&lt;/a&gt;JavaScript中的indexOf</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript中的indexOf-方法"><a href="#JavaScript中的indexOf-方法" class="headerlink" title="JavaScript中的indexOf()方法"></a>JavaScript中的indexOf()方法</h1><h2 id="字符串-String-中的indexOf-方法"><a href="#字符串-String-中的indexOf-方法" class="headerlink" title="字符串(String)中的indexOf()方法"></a>字符串(String)中的indexOf()方法</h2><blockquote><ul><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">indexOf</span>(searchString)</span><br><span class="line"><span class="title function_">indexOf</span>(searchString,position)</span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li></ul><ol><li><code>searchString(必需)</code>,字符串类型,为要搜索的字符串。</li></ol><p> <code>注意被查找的字符串区分大小写。</code></p><p> 假如没有提供该参数，<code>searchString</code>会被强制设置为<code>&quot;undefined&quot;</code>字符串,然后再当前字符串中查找这个值。</p><ol start="2"><li><code>position(可选)</code>，整数类型，即开始查找的地方，你也可以理解为类似数组中的下标。</li></ol><p>  若不提供参数，默认从<code>0</code>开始。</p><p>  若提供的<code>position</code>的值小于<code>0</code>则默认从<code>0</code>开始查找。若提供的<code>position</code>的值大于原来字符串的长度，则该方法不搜索传入的<code>searchString</code>字符串，返回<code>-1</code>。</p><p> <code>如果参数中提供的索引值是一个负值，则整个字符串都将会被查询。</code></p><ul><li><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3></li></ul><p> 该方法会返回查找字符串<code>searchString</code>的第一次出现的索引，如果没有找到，则返回<code>-1</code>。</p><ul><li><h4 id="注意当查找字符串是空字符串"><a href="#注意当查找字符串是空字符串" class="headerlink" title="注意当查找字符串是空字符串"></a>注意当查找字符串是空字符串</h4></li></ul><p>若被查找的字符串<code>searchString</code>是一个空字符串，则返回<code>position</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>) <span class="comment">// 返回 0 查找的字符串searchString是一个空字符串，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">3</span>) <span class="comment">// 返回 3 查找的字符串searchString是一个空字符串，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">8</span>) <span class="comment">// 返回 8 查找的字符串searchString是一个空字符串，则返回position</span></span><br></pre></td></tr></table></figure><blockquote><p>​        如果<code>position</code>值为空，或者<code>position</code>值小于被查找的字符串的长度，返回值和以下的<code>position</code>值一样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 返回 0 查找的字符串position值为空，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">1</span>) <span class="comment">// 返回 1 position的值小于字符串的长度11，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="comment">// 返回 2 position的值小于字符串的长度11，则返回position</span></span><br></pre></td></tr></table></figure><blockquote><p>​        如果<code>position</code>值大于等于字符串的长度，将会直接返回字符串的长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">11</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">13</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11</span></span><br><span class="line"> <span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">22</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11                </span></span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h3></li></ul><h4 id="检测是否存在某字符串。"><a href="#检测是否存在某字符串。" class="headerlink" title="检测是否存在某字符串。"></a>检测是否存在某字符串。</h4><p>​        当检查字符串中是否出现特定的子字符串时，正确的检查方法是测试返回值是否为 <code>-1</code>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Blue Whale&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Blue&#x27;</span>) !== -<span class="number">1</span>  <span class="comment">// true; found &#x27;Blue&#x27; in &#x27;Blue Whale&#x27;</span></span><br><span class="line"><span class="string">&#x27;Blue Whale&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Bloe&#x27;</span>) !== -<span class="number">1</span>  <span class="comment">// false; no &#x27;Bloe&#x27; in &#x27;Blue Whale&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="使用-indexOf-统计一个字符串中某个字母出现的次数"><a href="#使用-indexOf-统计一个字符串中某个字母出现的次数" class="headerlink" title="使用 indexOf() 统计一个字符串中某个字母出现的次数"></a>使用 indexOf() 统计一个字符串中某个字母出现的次数</h4><p>​        在下例中，使用 <code>count</code> 来记录字母 <code>e</code> 在字符串 <code>str</code> 中出现的次数：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻译：生存还是毁灭？这是个问题。（莎士比亚《哈姆雷特》）</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;To be, or not to be, that is the question.&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> position = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (position !== -<span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">position = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>, position + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// displays 4</span></span><br></pre></td></tr></table></figure><h2 id="数组-Array-中的indexOf-方法"><a href="#数组-Array-中的indexOf-方法" class="headerlink" title="数组(Array)中的indexOf()方法"></a>数组(Array)中的indexOf()方法</h2><blockquote><ul><li><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">indexOf</span>(searchElement)</span><br><span class="line"><span class="title function_">indexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3></li></ul><ol><li><p><code>searchElement(必需)</code>,需要查找的元素，类型不固定。</p></li><li><p><code>fromIndex(可选)</code>，整数类型，开始查找的位置，数组中的下标。</p></li></ol><p>  若不提供参数，默认从<code>0</code>开始。</p><p>​       开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1。</p><p>​       如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即 -1 表示从最后一个元素开始查找，-2 表示从倒数第                     二个元素开始查找，以此类推。</p><pre><code>  注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍       小于 0，则整个数组都将会被查询。其默认值为 0。</code></pre><ul><li><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3></li></ul><p>​       首个被找到的元素在数组中的索引位置; 若没有找到则返回 <strong>-1</strong>。</p><p>​       注意：不提供<code>searchElement</code>该参数，或者提供空字符串，返回值都为-1。</p><ul><li><h3 id="常用场景-1"><a href="#常用场景-1" class="headerlink" title="常用场景"></a>常用场景</h3></li></ul><h4 id="找出指定元素出现的所有位置"><a href="#找出指定元素出现的所有位置" class="headerlink" title="找出指定元素出现的所有位置"></a>找出指定元素出现的所有位置</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> indices = [];</span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> idx = array.<span class="title function_">indexOf</span>(element);</span><br><span class="line"><span class="keyword">while</span> (idx !== -<span class="number">1</span>) &#123;</span><br><span class="line">  indices.<span class="title function_">push</span>(idx);</span><br><span class="line">  idx = array.<span class="title function_">indexOf</span>(element, idx + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(indices);</span><br><span class="line"><span class="comment">// [0, 2, 4]</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="判断一个元素是否在数组里，不在则更新数组"><a href="#判断一个元素是否在数组里，不在则更新数组" class="headerlink" title="判断一个元素是否在数组里，不在则更新数组"></a>判断一个元素是否在数组里，不在则更新数组</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateVegetablesCollection</span> (veggies, veggie) &#123;</span><br><span class="line">  <span class="keyword">if</span> (veggies.<span class="title function_">indexOf</span>(veggie) === -<span class="number">1</span>) &#123;</span><br><span class="line">    veggies.<span class="title function_">push</span>(veggie);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`New veggies collection is: <span class="subst">$&#123;veggies&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;veggie&#125;</span> already exists in the veggies collection.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> veggies = [<span class="string">&#x27;potato&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;chillies&#x27;</span>, <span class="string">&#x27;green-pepper&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateVegetablesCollection</span>(veggies, <span class="string">&#x27;spinach&#x27;</span>);</span><br><span class="line"><span class="comment">// New veggies collection is: potato,tomato,chillies,green-pepper,spinach</span></span><br><span class="line"><span class="title function_">updateVegetablesCollection</span>(veggies, <span class="string">&#x27;spinach&#x27;</span>);</span><br><span class="line"><span class="comment">// spinach already exists in the veggies collection.</span></span><br></pre></td></tr></table></figure><h2 id="字符串中的indexOf-方法与数组中的indexOf-方法的相同点和不同点"><a href="#字符串中的indexOf-方法与数组中的indexOf-方法的相同点和不同点" class="headerlink" title="字符串中的indexOf()方法与数组中的indexOf()方法的相同点和不同点"></a>字符串中的indexOf()方法与数组中的indexOf()方法的相同点和不同点</h2><blockquote><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都是用来查找某一元素的</li><li>都有两个参数，要查找的元素，开始查找的位置</li><li>查找字符串时严格区分大小写</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>传要查找参数时，字符串的indexOf()方法会把不是字符串的参数，类型转换为字符串类型，数组不会。</li><li>传入起始查找的参数时，字符串的参数不支持负数。数组支持负数，传负数时，会从最后一个元素下标开始抵消。</li><li>返回值在某些情况下有所不同，字符串<code>searchString</code>参数为空字符串时，可能有多种返回结果。</li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript数组去重讲解详细版</title>
      <link>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/</link>
      <guid>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/</guid>
      <pubDate>Sat, 18 Mar 2023 12:13:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript数组去重讲解详细&quot;&gt;&lt;a href=&quot;#JavaScript数组去重讲解详细&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组去重讲解详细&quot;&gt;&lt;/a&gt;&lt;strong&gt;JavaScript数组去重讲解详细&lt;/stro</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript数组去重讲解详细"><a href="#JavaScript数组去重讲解详细" class="headerlink" title="JavaScript数组去重讲解详细"></a><strong>JavaScript数组去重讲解详细</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p><strong>博主也是刚刚开始水面试题才去了解JavaScript,并没有系统地去学习过JavaScript，如果博客或者其他博文有哪里不正确，不足的地方，欢迎各位指正、补充。话不多说，其实方法都一样（我就是加以自己的理解,也不知道对不对）例子均来自<a href="https://www.nowcoder.com/issue/tutorial?tutorialId=96&uuid=24304825a0c04ea9a53cdb09cb664834">牛客面试题</a>。</strong></p></blockquote><h2 id="1-利用ES6-Set去重（ES6中最常用）"><a href="#1-利用ES6-Set去重（ES6中最常用）" class="headerlink" title="1. 利用ES6 Set去重（ES6中最常用）"></a><strong>1. 利用ES6 Set去重（ES6中最常用）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"> <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><p><strong>这是使用了ES6中新增的<code>Array.from(</code>)和<code>Set()</code>来进行去重。</strong></p><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>使用<code>Set</code>数据结构来去重，将数组转为Set结构，再将Set结构转回数组。</strong></li><li><strong>返回去重后的数组。</strong></li></ol><ul><li><strong><code>Array.from()</code> 方法用于将类数<code>组对象( array-like object )</code> 和<code>可遍历对象( iterable object ) </code>转化为一个新的数组实例。</strong></li><li><strong><code>Set() </code>是ES6新增的数据结构，用于存储唯一的值，不允许重复。它类似于数组，但是成员的值都是唯一的。</strong></li></ul><p><strong>因此，首先将输入的数组转化为一个<code>Set</code>数据结构（利用Set可以去除重复项），然后再将<code>Set</code>数据结构转化为数组返回给用户。</strong></p><p><strong>在这个例子中，输入的数组<code>arr</code>包含了不同数据类型的元素，包括数字、字符串、布尔值、undefined、null、以及对象等。其中NaN存在特别的问题，<code>Set()</code> 中的<code>NaN值</code>可以去重，但是两个NaN之间不相等，因此去重的结果中只会保留一个NaN。</strong></p><p><strong>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</strong></p></blockquote><h2 id="2-利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#2-利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="2. 利用for嵌套for，然后splice去重（ES5中最常用）"></a><strong>2. 利用for嵌套for，然后splice去重（ES5中最常用）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><p><strong>采用双重循环和splice方法，双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</strong></p><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>使用双重循环来遍历数组中的每一个元素，并找到数组中的重复元素。</strong></li><li><strong>如果找到数组中的两个元素相同，那么就使用<code>splice</code>方法删除第二个元素，并将内层循环的计数器j减1，从而保证循环安全、完整。</strong></li><li><strong>返回去重后的数组。</strong></li></ol><p><strong>在循环操作中，对于每一个元素，它会从它后面的元素开始逐个比较，如果发现有相同的元素，则使用splice方法将后面的元素删除，并且j自减1。因为splice方法的调用，这个嵌套的循环可能需要执行许多次，性能上会比Set方法慢一些。</strong></p><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>NaN与对象一样，被认为是不同的元素类型，因此在此方法中不能移除掉数组中的所有NaN。</strong></li><li><strong>原数组中有两个null，但是在去重后，这两个null却被消失了，这是因为<code>splice</code>方法在使用时，可能会引起数组索引的变更，会影响当前的循环操作。</strong></li><li><strong>数组中的元素类型过于多样化时，并不容易保证去重的结果正确，比如在此例子中，两个{}对象并没有被移除，因为两个空对象之间是无法被“==”比较的。</strong></li></ul></blockquote><h2 id="3-利用indexOf去重"><a href="#3-利用indexOf去重" class="headerlink" title="3. 利用indexOf去重"></a><strong>3. 利用indexOf去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">   <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>定义了一个变量<code>array</code>，用于存储去重后的数组。</strong></li><li><strong>使用for循环遍历传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>array</code>数组中不存在该元素，则将该元素加入array数组中。</strong></li><li><strong>返回去重后的<code>array</code>数组。</strong></li></ol><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>与第二种方法一样，这个方法也无法正确地去重NaN和{}对象。</strong></li><li><strong>该方法的执行效率不如第一个方法Fast Set（ES6新增的Set）和第二个方法while+hasOwnProperty实现的快速去重。</strong></li></ul></blockquote><h2 id="4-利用sort"><a href="#4-利用sort" class="headerlink" title="4. 利用sort()"></a><strong>4. 利用sort()</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>对传入的数组进行排序。</strong></li><li><strong>定义了两个变量<code>arrry</code>和<code>obj</code>，分别用于存储去重后的数组和存储数组元素出现次数的对象。</strong></li><li><strong>将排序后的数组的第一个元素加入到<code>arrry</code>数组中。</strong></li><li><strong>使用for循环遍历排序后的传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>arr[i]</code>和<code>arr[i-1]</code>的值不相等，那么就将该元素加入到<code>arrry</code>数组中，实现去重。</strong></li><li><strong>最后返回去重后的数组<code>arrry</code>。</strong></li></ol><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>与前面三种方法一样，这个方法无法正确地去重包括NaN和{}对象在内的某些数据类型。在此例子中，NaN和{}对象没有被正确去重，而且它们还变得更多了（排序后相邻的NaN变成了3个，{}对象也变成了2个）。</strong></li><li><strong>类型不同的数据进行排序后，得到的可能并不是想要的顺序，比如在此例子中，数字0出现在了末尾。</strong></li></ul></blockquote><h2 id="5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a><strong>5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">     <span class="keyword">var</span>  obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    //两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>定义了两个变量<code>arrry</code>和<code>obj</code>，分别用于存储去重后的数组和存储数组元素出现次数的对象。</strong></li><li><strong>使用for循环遍历传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>obj</code>对象中未出现这个元素，即该元素没有出现过，就将它加入到<code>arrry</code>数组中，并给相应的<code>obj</code>属性赋初值1表示出现了一次。</strong></li><li><strong>如果<code>obj</code>对象中已经出现了该元素，那么就只将相应<code>obj</code>的属性值加1，表示该元素又出现了一次。</strong></li><li><strong>最后返回去重后的数组<code>arrry</code>。</strong></li></ol><p><strong>然后函数返回去重后的元素数组。但是这个方法也存在一些问题，比如：</strong></p><ul><li><strong>与前面所有方法一样，这个方法也无法正确地去重包括NaN和{}对象在内的某些数据类型。但是在此例子中，这个方法可以正确地去除所有重复元素。</strong></li><li><strong>此方法可能会改变数组中元素的顺序，因为在循环遍历数组时，对象的属性遍历顺序并不是按照数组元素的出现顺序，因此去重结果有可能不是原数组中元素的原始顺序。</strong></li></ul></blockquote><h2 id="6-利用includes"><a href="#6-利用includes" class="headerlink" title="6. 利用includes"></a><strong>6. 利用includes</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                    array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>在函数内部，先检查传入的参数是否为数组，如果不是则打印一条类型错误的消息，并退出函数；否则继续下一步。</strong></li><li><strong>创建一个新的空数组 <code>array</code>，用于存储去重后的结果。</strong></li><li><strong>使用 for 循环遍历原始数组 <code>arr</code>，在遍历过程中对每个元素进行判断，如果 <code>array</code> 中不包含该元素，就将其添加到 <code>array</code> 数组中。</strong></li><li><strong>遍历完成后，返回 <code>array</code> 数组，其中包含了原始数组中的所有不重复元素。</strong></li><li><strong>注意，由于 <code>includes</code> 方法无法去重对象类型，所以在最终的结果中仍会保留数组中出现的对象值。</strong></li></ol><p><strong>然后函数返回去重后的元素数组。但是这个方法也存在一些问题，比如：</strong></p><ul><li><strong>与前面所有方法一样，这个方法也无法正确地去重包括{}对象在内的某些数据类型。在此例子中，两个空对象没有被正确去除。</strong></li><li><strong>includes方法ES7新增，不是所有浏览器均支持这个方法。</strong></li></ul></blockquote><h2 id="7-利用hasOwnProperty"><a href="#7-利用hasOwnProperty" class="headerlink" title="7. 利用hasOwnProperty"></a><strong>7. 利用hasOwnProperty</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><h3 id="解释-6"><a href="#解释-6" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个空对象 <code>obj</code>。</strong></li><li><strong>使用 <code>filter</code> 函数来遍历数组。<code>filter</code> 函数对数组中所有元素执行给定的函数，返回一个新数组，该数组中的所有元素都是在测试函数中返回 true 的原始数组元素。</strong></li><li><strong>在 <code>filter</code> 函数中，使用匿名函数来检查当前元素是否已经在原数组中出现。为了避免比较数据类型，使用 typeof 操作符获取其类型，并将其与元素值结合为一个字符串 <code>typeof item + item</code>。</strong></li><li><strong>在每次遍历过程中，使用 <code>hasOwnProperty</code> 检查对象 <code>obj</code> 中是否已经存在当前元素。如果存在，则返回 false，不加入到结果数组中。</strong></li><li><strong>如果不存在，则将当前元素添加到 <code>obj</code> 对象中，并返回 true，将其加入到新数组中。</strong></li><li><strong>遍历完成后，返回已经去重的数组。</strong></li></ol></blockquote><h2 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8. 利用filter"></a><strong>8. 利用filter</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释-7"><a href="#解释-7" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>使用 <code>filter</code> 函数来遍历数组。<code>filter</code> 函数对数组中所有元素执行给定的函数，返回一个新数组，该数组中的所有元素都是在测试函数中返回 true 的原始数组元素。</strong></li><li><strong>在 <code>filter</code> 函数中，使用匿名函数来检查当前元素是否已经在原数组中出现。使用 <code>indexOf</code> 方法查找当前元素在原始数组中的第一个索引，如果索引值与当前索引值相等，即表示当前元素是在原始数组中第一次出现，将其添加到结果数组中。</strong></li><li><strong>如果当前索引不是第一次出现，即与原始数组中其他索引值相等，则不添加到结果数组中。</strong></li><li><strong>遍历完成后，返回已经去重的数组。</strong></li></ol><ul><li><strong>此方法在遍历数组的过程中会多次调用<code> indexOf</code> 方法，又由于<code>indexOf</code>方法的时间复杂度为 O(n)，因此其效率可能不够高。</strong></li><li><strong>该方法可能不适用于处理元素为对象的数组，因为对象的引用地址不同，虽然对象具有相同的类型和值，但是 <code>indexOf</code> 方法不会被认为两个不同的对象是相同的元素，因此无法对它们去重。</strong></li></ul></blockquote><h2 id="9-利用递归去重"><a href="#9-利用递归去重" class="headerlink" title="9. 利用递归去重"></a><strong>9. 利用递归去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> array= arr;</span><br><span class="line">        <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>])&#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="解释-8"><a href="#解释-8" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code>并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个新的变量 <code>array</code> 并将其值设置为传入参数的值。</strong></li><li><strong>创建一个变量 <code>len</code> 并将其赋值为 <code>array</code> 数组的长度。</strong></li><li><strong>使用 <code>sort()</code> 函数对 <code>array</code> 数组进行排序。这么做是为了更方便地进行数组去重。</strong></li><li><strong>函数中创建了一个名为 <code>loop</code> 的内部函数。<code>loop</code> 函数使用递归的方法遍历数组，比较前后两个元素是否相等，如果相等，则将后一个元素从数组中删除。</strong></li><li><strong>调用 <code>loop(len-1)</code> 函数，开始遍历 <code>array</code> 数组。</strong></li><li><strong>函数返回 <code>array</code> 数组（已经去除了重复元素）。</strong></li></ol></blockquote><h2 id="10-利用Map数据结构去重"><a href="#10-利用Map数据结构去重" class="headerlink" title="10. 利用Map数据结构去重"></a><strong>10. 利用Map数据结构去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">      array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="解释-9"><a href="#解释-9" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>arrayNonRepeatfy</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个新的 Map 对象 <code>map</code>，用于存储数组中的值。</strong></li><li><strong>创建一个新的数组 <code>array</code>，用于存储去重后的结果。</strong></li><li><strong>使用 for 循环遍历数组 <code>arr</code>。在遍历过程中，获取当前元素的值。使用 Map 的 has() 方法检查该元素是否已经存在于 Map 中。</strong></li><li><strong>如果存在，将该元素对应的 Map 的 value 值设为 true。</strong></li><li><strong>如果不存在，则将该元素加入到数组 <code>array</code> 中，并将 Map 的 value 值设为 false。</strong></li><li><strong>遍历完成后，返回已经去重的数组 <code>array</code>。</strong></li></ol></blockquote><h2 id="11-利用reduce-includes"><a href="#11-利用reduce-includes" class="headerlink" title="11. 利用reduce+includes"></a><strong>11. 利用reduce+includes</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释-10"><a href="#解释-10" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>使用 <code>reduce</code> 函数来遍历数组。<code>reduce</code> 函数将数组元素传递给指定的函数，返回一个输出结果。初始值为空数组[]。</strong></li><li><strong>在 <code>reduce</code> 函数中，使用箭头函数处理每个元素。如果这个元素没有在初始值数组 <code>prev</code> 中出现过，那么就将这个元素放入数组 <code>prev</code> 中，使用逗号运算符返回新数组[…prev,cur]。</strong></li><li><strong>如果元素已经出现在 <code>prev</code> 数组中，那么就返回之前的 <code>prev</code> 数组，从而达到去重的目的，即 return prev。</strong></li><li><strong>遍历完成后，返回已经去重的数组 <code>prev</code>。</strong></li></ol></blockquote><h2 id="12-…new-Set-arr"><a href="#12-…new-Set-arr" class="headerlink" title="12. […new Set(arr)]"></a><strong>12. […new Set(arr)]</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] </span><br></pre></td></tr></table></figure><h3 id="解释-11"><a href="#解释-11" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>在 ES6 中，Set 是一种新的数据结构，表示一组无序且唯一的值。Set 可以接收一个可迭代对象，比如数组，在迭代对象中进行去重操作。</strong></li><li><strong>将数组 <code>arr</code> 传递给 Set 构造函数，它会自动去除数组中的重复项。</strong></li><li><strong>使用扩展运算符<code>[...]</code>将 Set 转换成数组，从而实现去重。</strong></li><li><strong>返回已经去重的数组。</strong></li></ol></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git基本使用及常用命令</title>
      <link>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <guid>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Thu, 16 Mar 2023 12:33:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Git学习笔记&quot;&gt;&lt;a href=&quot;#Git学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Git学习笔记&quot;&gt;&lt;/a&gt;Git学习笔记&lt;/h1&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>提交分三步</p><p>第一 <code>git add .</code> 修改添加到缓存区</p><p>第二 <code>git commit -m &#39;修改内容说明&#39;</code>提交缓存区文件</p><p>第三 <code>git push</code> 向远程仓库推送。</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><blockquote><p><code>git config</code> 命令用于获取并设置存储库或全局选项（一般刚下载的git需要配置用户名和用户邮箱，以获取获取代码的权限）</p><p>可以通过<code>git config</code>来配置用户名和邮箱地址，便于我们将代码提交到远程仓库</p><p><code>git config --global user.name &#39;你的用户名&#39;</code><br><code>git config --global user.email &#39;你的邮箱&#39;</code></p><p>如果去掉 –global 参数只对当前仓库有效.</p></blockquote><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><blockquote><p>命令格式：<code>git init</code></p><p><code>git init</code>: 用于初始化厂库</p><p>使用<code>git init</code> 命令后，会在命令输入的根目录下生成一个<code>.git</code>目录，该目录包括了一些资源数据。</p><p>也可以 <code>git init  文件名或路径</code> 在指定路径目录下初始化厂库、生成<code>.git</code>文件。 </p></blockquote><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><blockquote><p>命令格式：<code>git clone</code></p><p><code>git clone</code> ：将远程仓库的资源克隆到本地</p><p><code>git clone &lt;url&gt; [directory]</code></p><p>此命令的两个参数 <code>url</code>为仓库地址，<code>directory</code>为本地路径。<code>directory</code>可以省略，则默认会克隆<code>url</code>地址下的仓库到当前命令行输入路径。</p></blockquote><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><blockquote><p>命令格式：<code>git add [file1] [file2] ...</code></p><p>添加文件到暂存区：<br><code>git add file</code></p><p>添加指定目录到暂存区，包括子目录：</p><p><code>git add [dir]</code></p><p>常用命令为添加当前目录下的所有文件到暂存区：</p><p><code>git add .</code></p><p>当然我们也可以指定某一类文件，如将java文件添加到缓存中，可以使用如下命令：</p><p><code>git add *.java</code></p></blockquote><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><blockquote><p>命令格式：<code>git commit -m [message]</code></p><p><code>[message]</code> 可以是一些备注信息。</p><p><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交:</p><p><code>git commit -a</code></p></blockquote><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><p>将本地分支的更新，推送到远程仓库中。</p><p>实例：<code>git push origin newbranch:newbranch </code></p><p>如果本地分支名与远程分支名相同，则可以省略 <code>：&lt;远程分支名&gt;</code></p><p>如果本地版本与远程版本有差异，但又要强制推送可以使用 –force 参数：</p><p><code>git push --force origin master</code></p><p>删除主机的分支可以使用 –delete 参数，以下命令表示删除 origin 主机的 master 分支:</p><p><code>git push origin --delete master</code></p></blockquote><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><blockquote><p>命令格式：<code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p><code>git pull</code> 其实就是 <code>git fetch</code> 和 <code>git merge FETCH_HEAD</code> 的简写。</p><p><code>git pull</code>命令将远程仓库的资源拉取到本地。常用的用法，切换到主分支，然后<code>git pull</code>就可以了，此命令相当于本地主分支的资源与远程的仓库资源做了同步</p><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并:</p><p><code>git pull origin master:brantest</code></p><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略 <code>：&lt;本地分支名&gt;</code></p></blockquote><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><blockquote><p>从远程仓库中下载资源，且和pull不一样，pull会合并资源，fetch不会</p></blockquote><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><blockquote><p>命令格式：<code>git rm &lt;file&gt;</code></p><p><code>git rm &lt;file&gt;</code> 将文件从工作区和暂存区删除</p><p><code>git rm</code>用于删除文件</p><p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 <code>Changes not staged for commit</code> 的提示.</p><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p><p><code>git rm -f &lt;file&gt;</code></p><p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可</p><p><code>git rm --cached &lt;file&gt;</code></p><p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p><p><code>git rm –r *</code></p></blockquote><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><blockquote><p>命令格式：<code>git mv [file] [newfile] </code></p><p>git mv 命令用于移动或重命名一个文件、目录、软连接，如要将一个test.txt文件重命名为newtest.txt，则可以使用如下命令：</p><p><code>git mv test.txt newtest.txt</code></p><p>如果新文件名已经存在，但还是要重命名它，可以使用 <strong>-f</strong> 参数：</p><p><code>git mv -f [file] [newfile]</code></p></blockquote><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><blockquote><p><em><strong>git branch</strong></em> 有多种命令格式：</p><ul><li>**<code>git branch</code>**：查看分支命令，其中<code>*</code>号的分支为当前所在分支。<code>git branch -a</code>查看本地分支和远程分支</li><li>**<code>git branch (branchname)</code>**：创建分支命令， 我们也可以使用 <strong><code>git checkout -b (branchname)</code></strong> 命令来创建新分支并立即切换到该分支下，从而在该分支中操作</li><li>**<code>git checkout (branchname)</code>**：切换分支命令</li><li><strong><code>git branch -delete (branchname)</code><strong>：删除分支命令,可以简化为</strong><code>git branch -d (branchname)</code></strong></li></ul></blockquote><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><blockquote><p>命令格式：<code>git merge &lt;需要合并的分支&gt;</code></p><p><code>git merge &lt;需要合并的分支&gt;</code>该命令执行后，会将<code>需要合并的分支</code>合并到<code>当前分支</code></p></blockquote><h4 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h4><blockquote><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。不用 -a 选项也可以执行的，但它不会记录这标签是啥.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v1.0 </span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v0.9 85fc7e7</span><br><span class="line">&gt;$ git log --oneline --decorate --graph</span><br><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag</span><br><span class="line">&gt;v0.9</span><br><span class="line">&gt;v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h3><p>前面我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。本本将使用 Github 作为远程仓库，来介绍Git 远程仓库的使用。</p><p>下面介绍远程仓库常用的几种指令：</p><ul><li><code>git remote add</code>：添加远程仓库</li><li><code>git remote</code>：查看当前的远程仓库</li><li><code>git fetch</code>、<code>git pull</code>：提取远程仓仓库</li><li><code>git push</code>：推送到远程仓库</li><li><code>git remote rm</code>：删除远程仓库</li></ul><h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><blockquote><p>命令格式：<code>git remote add [alias] [url]</code></p><p>参数[alias]为别名， <code>[url]</code>为远程仓库的地址，如：我们可以将<a href="https://github.com/Yhq00/Yhq00.github.io.git">https://github.com/Yhq00/Yhq00.github.io.git</a></p><p>仓库添加到本地，并命名为test，操作如下：</p><p><code>git remote add https://github.com/Yhq00/Yhq00.github.io.git </code></p></blockquote><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h4><blockquote><p>命令格式：<code>git remote</code>，该命令可以查看当前有哪些远程仓库</p></blockquote><h4 id="git-fetch、git-pull"><a href="#git-fetch、git-pull" class="headerlink" title="git fetch、git pull"></a>git fetch、git pull</h4><blockquote><p>命令格式：<code>git fetch [alias]</code>、<code>git pull [alias]</code></p><p><code>git fetch</code>、<code>git pull</code>可以提取远程仓库的数据，如果有多个远程仓库，我们可以在后面加仓库的别名，操作如下:</p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch</code>和<code>git pull</code>的区别：</p><ol><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动合并。</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地。</li></ol></blockquote><h4 id="git-push-1"><a href="#git-push-1" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push [alias] [branch]</code></p><p>该命令会推送你的新分支与数据到某个远端仓库.</p></blockquote><h4 id="git-remote-rm"><a href="#git-remote-rm" class="headerlink" title="git remote rm"></a>git remote rm</h4><blockquote><p>命令格式: <code>git remote rm [alias]</code></p><p><code>git remote rm</code>删除远程仓库</p></blockquote><p>到此，基本的git操作就介绍完了。</p><p>参考自:</p><p><a href="https://blog.csdn.net/qtiao/article/details/97783243">Git 常用基本命令使用详细大全_git常用命令_坚强的小水滴的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/git/git-tutorial.html">菜鸟Git教程</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Git%E4%BD%BF%E7%94%A8/">Git使用</category>
      
      
      <category domain="http://example.com/tags/Git/">Git</category>
      
      
      <comments>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>文件路径注重点及网络路径和本地路径</title>
      <link>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</link>
      <guid>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</guid>
      <pubDate>Mon, 13 Mar 2023 23:59:32 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用&lt;code&gt;\&lt;/code&gt;img&lt;code&gt;\&lt;/code&gt;yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用<code>\</code>img<code>\</code>yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端口，图片能加载，传到网络服务器上缺不可以加载，后来研究了一下原来是<code>\</code>的原因，特此记录一下。</p></blockquote><blockquote><p>Unix使用斜杆/ 作为路径分隔符，而web应用最新使用在Unix系统上面，所以目前所有的网络地址都采用 斜杆/ 作为分隔符。<br>Windows由于使用 斜杆/ 作为DOS命令提示符的参数标志了，为了不混淆，所以采用 反斜杠\ 作为路径分隔符。所以目前windows系统上的文件浏览器都是用 反斜杠\ 作为路径分隔符。随着发展，DOS系统已经被淘汰了，命令提示符也用的很少，斜杆和反斜杠在大多数情况下可以互换，没有影响。<br>知道这个背景后，可以总结一下结论：<br>（1）浏览器地址栏网址使用 斜杆/ ;<br>（2）windows文件浏览器上使用 反斜杠\ ;<br>（3）出现在html url() 属性中的路径，指定的路径是网络路径，所以必须用 斜杆/ ;<br><code>// 如果url后面用反斜杠\，就不会显示任何背景</code><br>（4）出现在普通字符串中的路径，如果代表的是windows文件路径，则使用斜杆/和反斜杠\是一样的如果代表的是网络文件路径，则必须使用 斜杆/ ;<br><code>// 本地文件路径，/ 和 \ 是等效的</code><br><code>// 网络文件路径，一定要使用 斜杆/</code><br>（5）windows系统的地址栏能够识别单反斜杠”\“，而不能识别双反斜杠”\\“，这是系统文件系统自身的约定，路径层次使用“\”区分而不是使用“\\”来区分：<br>所以F:\\Office\\Trunk__Out\\Pro Debug\\Bin\\OfficeInfo.dll这样是不正确的。<br>而在程序中，字符串中的“\”主要是为了转义，“\”转义后被理解为“\”,“\”才能够被操作系统文件系统所理解，比如用字符串表示上述路径：“F:\Office\Trunk\__Out\Pro Debug\Bin\OfficeInfo.dll”，同理，如果想要表示“\”，可以写作“\\”。</p></blockquote><blockquote><p>在不同系统的情况系 indows下是,linux和unix下是/ ,但在Windows中没有本质区别。<br>但是由于 \ 也是转义字符的起始字符，<br>所以，路径中的 \ 通常需要使用 \如果是 / 就不需要使用转义了<br>如C中文件操作，c:\kkk\dd.txt c:/kkk/dd.txt一样<br>“./“：代表目前所在的目录<br>“../“：代表上一层目录<br>\ 用于本地/ 用于网络连接地址</p></blockquote><p><a href="https://www.cnblogs.com/lhang55/p/7616816.html#:~:text=%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%EF%BC%9A%2F%E5%92%8C%E7%9A%84%E5%8C%BA%E5%88%AB%20Unix%E4%BD%BF%E7%94%A8%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%EF%BC%8C%E8%80%8Cweb%E5%BA%94%E7%94%A8%E6%9C%80%E6%96%B0%E4%BD%BF%E7%94%A8%E5%9C%A8Unix%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%9D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E7%9B%AE%E5%89%8D%E6%89%80%E6%9C%89%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E9%83%BD%E9%87%87%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82,Windows%E7%94%B1%E4%BA%8E%E4%BD%BF%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BADOS%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E7%9A%84%E5%8F%82%E6%95%B0%E6%A0%87%E5%BF%97%E4%BA%86%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%B8%8D%E6%B7%B7%E6%B7%86%EF%BC%8C%E6%89%80%E4%BB%A5%E9%87%87%E7%94%A8%20%E5%8F%8D%E6%96%9C%E6%9D%A0%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82">参考转载自：此链接</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="http://example.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <comments>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript输出</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript输出&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript不提供任何内建的打印或显示函数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 显示方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Win</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><p><strong>JavaScript输出</strong></p><hr><p>JavaScript不提供任何内建的打印或显示函数。</p><hr><p><strong>JavaScript 显示方式</strong></p><ul><li>使用Window.alert( ) 写入警告框</li><li>使用document.write( )写入HTML输出</li><li>使用innerHTML 写入HTML元素</li><li>使用console.log()写入浏览器控制台</li></ul><p><strong>实例：</strong></p><ol><li><p>使用Window.alert( ) 写入警告框</p><p><img src="/./img/JS1.png" alt="JS1"></p></li></ol><p>2.使用document.write( )写入HTML输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(5 + 6)&quot;</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击前：</p><p><img src="/./img/js2-1.png" alt="js211"></p><p>点击后：</p><p><img src="/./img/js2-2.png" alt="js2-2"></p><p><strong>注意：</strong>在 HTML 文档完全加载后使用 <code>document.write()</code> 将<em>删除所有已有的 HTML</em></p><p><strong>提示：</strong><code>document.write()</code> 方法仅用于测试</p><p>3.使用innerHTML 写入HTML元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="number">5</span> + <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/./img/js3.png" alt="js3"></p><p><strong>提示：</strong>更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><p>4.使用console.log()写入浏览器控制台</p><p><img src="/./img/js4.png" alt="js4"></p><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript第一天被提问的问题</title>
      <link>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</link>
      <guid>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript学习笔记&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记&quot;&gt;&lt;/a&gt;JavaScript学习笔记&lt;/h1&gt;&lt;h6 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h6 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">JavaScript基本数据类型分为Null、Undefined、Boolean、Number、BigInt、String、2015年Symbol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavaScript 数据类型</span><br><span class="line">JavaScript 中有五种可包含值的数据类型：</span><br><span class="line"></span><br><span class="line">字符串（string）</span><br><span class="line">数字（number）</span><br><span class="line">布尔（boolean）</span><br><span class="line">对象（object）</span><br><span class="line">函数（function）</span><br><span class="line">有三种对象类型：</span><br><span class="line"></span><br><span class="line">对象（Object）</span><br><span class="line">日期（Date）</span><br><span class="line">数组（Array）</span><br><span class="line">同时有两种不能包含值的数据类型：</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line"> Null类型只有一个值Null</span><br><span class="line"> Undefined类型只有一个值Undefined</span><br><span class="line"> Boolean类型有两个值true、false</span><br><span class="line"> Number类型表示IEE754标准的双精度64位二进制格式的值(存储 2^-1074（Number.MIN_VALUE）和 2^1024（Number.MAX_VALUE）之</span><br><span class="line"> 的正浮点数，以及 -2^-1074 和 -2^1024 之间的负浮点数，但是它仅能安全地存储在 -(2^53 − 1)（Number.MIN_SAFE_INTEGER）     到2^53 − 1</span><br><span class="line"> BigInt类型在 Javascript 中是一个数字的原始值，它可以表示任意大小的整数。使用 BigInt，你可以安全地存储和操作巨大的整数，甚至   超过 Number 的安全整数限制</span><br><span class="line"> String类型表示文本数据</span><br><span class="line"> Symbol是唯一并且不可变的原始值并且可以用来作为对象属性的键（如下）。在某些程序语言当中，Symbol 也被称作“原子类型”（atom）。     symbol 的目的是去创建一个唯一属性键，保证不会与其他代码中的键产生冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">问题：Js操作数组有哪几种方法？</span><br><span class="line">答案：</span><br><span class="line">length属性。主要用于获得数组内元素的个数，常用于for循环或一些判断语句中取得数组的长度。</span><br><span class="line">concat()方法。用于把两个或多个数组合并成一个数组，数组的索引会按照合并数组的顺序重新排序</span><br><span class="line">join()方法。主要用于将数组内的元素使用字符拼接成一个字符串，不传拼接字符参数，默认使用逗号。</span><br><span class="line">pop()方法。删除数组中最后一个元素，与之相反的方法是push()，向数组的末尾添加一个或多个元素。</span><br><span class="line">reverse()方法。这个方法主要用于反转数组元素，索引数组 reverse后会重新排序。</span><br><span class="line">slice()方法。用于从数组中提取所需要的元素，传入的参数是提取元素开始位置，例如slice(3)，则从下标为3的元素开始提取。</span><br><span class="line">splice()方法。splice()方法需要传入三个参数，第一个参数是索引开始的位置，第二个参数是删除元素的数量，第三个参数是在开始索引的位置插入的元素（可以为多个元素）。</span><br></pre></td></tr></table></figure><p><img src="/./img/1.jpg" alt="1"></p><p><img src="/./img/2.webp" alt="2"></p><p><img src="/./img/3.webp" alt="3"></p><p><img src="/./img/4.webp" alt="4"></p><p><img src="/./img/5.webp" alt="5"></p><p><img src="/./img/6.webp" alt="6"></p><p><img src="/./img/7.webp" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题3：Js输出一个数组内所有元素的方法？</span><br><span class="line">答案：</span><br><span class="line">1、使用“console.log(数组名)”输出数组；2、利用for或for in语句循环输出数组；3、利用forEach()遍历数组，输出数组元素；4、利用map()遍历数组，输出数组元素。</span><br></pre></td></tr></table></figure><p><strong>方法1：直接利用console.log(数组名)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/374/314/958/1630567297409318.png" alt="1.png"></p><p><strong>方法2：利用for/for in循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/290/588/412/1630567420767090.png" alt="2.png"></p><p><strong>方法4：map()方遍历数组，循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=arr.<span class="title function_">map</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/192/435/414/1630567596204506.png" alt="4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
