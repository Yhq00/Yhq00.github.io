<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>这波又白给</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>在天堂和地域之间，没有我选择的权利，只有别人选择我的命运！</description>
    <pubDate>Sat, 25 Mar 2023 12:49:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>浅谈JavaScript中的闭包</title>
      <link>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</link>
      <guid>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</guid>
      <pubDate>Wed, 22 Mar 2023 11:46:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;浅谈JavaScript中的闭包&quot;&gt;&lt;a href=&quot;#浅谈JavaScript中的闭包&quot; class=&quot;headerlink&quot; title=&quot;浅谈JavaScript中的闭包&quot;&gt;&lt;/a&gt;浅谈JavaScript中的闭包&lt;/h1&gt;&lt;h2 id=&quot;简述闭包&quot;&gt;&lt;a </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="浅谈JavaScript中的闭包"><a href="#浅谈JavaScript中的闭包" class="headerlink" title="浅谈JavaScript中的闭包"></a>浅谈JavaScript中的闭包</h1><h2 id="简述闭包"><a href="#简述闭包" class="headerlink" title="简述闭包"></a>简述闭包</h2><blockquote><p>谈及闭包，每个人都有不同的理解，“一千个读者眼中就会有一千个哈姆雷特。”。笔者认为，简述闭包就是，让开发者可以从内部函数访问外部函数的作用域，即使在父函数关闭之后。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器目前是 3 </span></span><br></pre></td></tr></table></figure><blockquote><p>看明白了吗？如果没有的话，让我们重头来过。</p></blockquote><h2 id="解释引例1"><a href="#解释引例1" class="headerlink" title="解释引例1"></a>解释引例1</h2><blockquote><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>我们知道，在JavaScript中，函数能够访问<code>内部</code>定义的所有变量：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>也能够访问函数<code>外部</code>定义的变量:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>在最后这个例子中，<code>a</code> 是<code>全局</code>变量。</p><p>在网页中，全局变量属于 window 对象。</p><p>全局变量能够被页面中（以及窗口中）的所有脚本使用和修改。</p><p>在第一个例子中，<code>a</code> 是<code>局部</code>变量。</p><p>局部变量只能用于其被定义的函数内部。对于其他函数和脚本代码来说它是不可见的。</p><p>拥有相同名称的全局变量和局部变量是不同的变量。修改一个，不会改变其他。</p><p><code>不通过</code>关键词 <code>var</code> 创建的变量总是全局的，即使它们在函数中创建(即<code>变量提升</code>）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时，x相当于全局变量。</p></blockquote><hr><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p>全局变量活得和您的应用程序（窗口、网页）一样久。</p><p>局部变量活得不长。它们在函数调用时创建，在函数完成后被删除。</p><hr><h2 id="解释引例2"><a href="#解释引例2" class="headerlink" title="解释引例2"></a>解释引例2</h2><blockquote><p>假设您想使用变量来计数，并且您希望此计数器可用于所有函数。</p><p>您可以使用全局变量和函数来递增计数器：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化计数器</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递增计数器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用三次 add()</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时计数器应该是 3</span></span><br></pre></td></tr></table></figure><blockquote><p>但是这个计数器存在一些问题，我们可以通过其他方式改变<code>counter</code>的值不一定需要通过<code>add()</code>方法，又或者说，这个全局变量<code>counter</code>会受到其他函数或者方法的影响而改变，这时我<code>add()</code>方法统计出来的<code>counter</code>的值，可能不是正确的结果，为了解决这个问题，我们把变量定义移到<code>add()</code>方法内部:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递增计数器的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>; </span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用三次 add()</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时计数器应该是 3。但它是 1。</span></span><br></pre></td></tr></table></figure><blockquote><p>此时<code>counter</code>为方法内的局部变量，不会受到其他函数或者方法的影响，但是，我们发现，实际上，输出的并不是我们想要的结果。因为每一次执行<code>add</code>方法时，<code>counter</code>都会被置0。</p><p>实际上我们想要的结果是：在开始时，<code>counter</code>初始化为0，此后不再执行置0操作，但是每次都会执行<code>+1</code>操作。那怎么办呢？我们可以这样实现：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第一次调用 counter值为1</span></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第二次调用 counter值为2</span></span><br><span class="line"><span class="title function_">add</span>();<span class="comment">//第三次调用 counter值为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器目前是 3 </span></span><br></pre></td></tr></table></figure><blockquote><p>我们定义了一个<code>add</code>变量，让它等于一个自调用函数:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)() <span class="comment">//自调用函数格式</span></span><br></pre></td></tr></table></figure><blockquote><p>那么我们来解释一下，上述代码片段：</p><p><strong>第一次</strong>调用<code>add</code>方法时，会按照从上到下执行，<code>counter</code>初始化为<code>0</code>，然后<code>counter</code> = <code>counter</code> + 1,所以第一次结果输出为1</p><p><strong>第二次</strong>调用<code>add</code>方法，注意这里因为第一次调用时返回给我们的是<code>return function () &#123;return counter += 1;&#125;</code>所以此时实际上<code>add</code>长这样：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add =<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">return</span> counter += <span class="number">1</span>; &#125; <span class="comment">//couter值为1</span></span><br></pre></td></tr></table></figure><blockquote><p>因为我们并没有去执行第一个匿名函数，所以<code>counter</code>值并没有置0，仍然为我们之前改变的1</p><p>此时<code>counter = counter(1) + 1</code>为2</p><p><strong>第三次</strong>也可以这么理解。</p><p>上述代码片段也可以改写成：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>   <span class="keyword">function</span> <span class="title function_">incrementCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> counter += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="title function_">counter</span>();</span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 1</span></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="title function_">add</span>(); <span class="comment">// 输出 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>我们通过计数器的例子，实实在在的访问并改变了外部函数的变量，除了第一次调用过这个函数之外。后续的每一次变量的访问和改变我们都没有访问外部函数。这就是闭包的经典案列。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/22/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript中的indexOf()方法</title>
      <link>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/</link>
      <guid>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Wed, 22 Mar 2023 09:40:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript中的indexOf-方法&quot;&gt;&lt;a href=&quot;#JavaScript中的indexOf-方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的indexOf()方法&quot;&gt;&lt;/a&gt;JavaScript中的indexOf</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript中的indexOf-方法"><a href="#JavaScript中的indexOf-方法" class="headerlink" title="JavaScript中的indexOf()方法"></a>JavaScript中的indexOf()方法</h1><h2 id="字符串-String-中的indexOf-方法"><a href="#字符串-String-中的indexOf-方法" class="headerlink" title="字符串(String)中的indexOf()方法"></a>字符串(String)中的indexOf()方法</h2><blockquote><ul><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">indexOf</span>(searchString)</span><br><span class="line"><span class="title function_">indexOf</span>(searchString,position)</span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3></li></ul><ol><li><code>searchString(必需)</code>,字符串类型,为要搜索的字符串。</li></ol><p> <code>注意被查找的字符串区分大小写。</code></p><p> 假如没有提供该参数，<code>searchString</code>会被强制设置为<code>&quot;undefined&quot;</code>字符串,然后再当前字符串中查找这个值。</p><ol start="2"><li><code>position(可选)</code>，整数类型，即开始查找的地方，你也可以理解为类似数组中的下标。</li></ol><p>  若不提供参数，默认从<code>0</code>开始。</p><p>  若提供的<code>position</code>的值小于<code>0</code>则默认从<code>0</code>开始查找。若提供的<code>position</code>的值大于原来字符串的长度，则该方法不搜索传入的<code>searchString</code>字符串，返回<code>-1</code>。</p><p> <code>如果参数中提供的索引值是一个负值，则整个字符串都将会被查询。</code></p><ul><li><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3></li></ul><p> 该方法会返回查找字符串<code>searchString</code>的第一次出现的索引，如果没有找到，则返回<code>-1</code>。</p><ul><li><h4 id="注意当查找字符串是空字符串"><a href="#注意当查找字符串是空字符串" class="headerlink" title="注意当查找字符串是空字符串"></a>注意当查找字符串是空字符串</h4></li></ul><p>若被查找的字符串<code>searchString</code>是一个空字符串，则返回<code>position</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>) <span class="comment">// 返回 0 查找的字符串searchString是一个空字符串，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">3</span>) <span class="comment">// 返回 3 查找的字符串searchString是一个空字符串，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">8</span>) <span class="comment">// 返回 8 查找的字符串searchString是一个空字符串，则返回position</span></span><br></pre></td></tr></table></figure><blockquote><p>​        如果<code>position</code>值为空，或者<code>position</code>值小于被查找的字符串的长度，返回值和以下的<code>position</code>值一样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 返回 0 查找的字符串position值为空，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">1</span>) <span class="comment">// 返回 1 position的值小于字符串的长度11，则返回position</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="comment">// 返回 2 position的值小于字符串的长度11，则返回position</span></span><br></pre></td></tr></table></figure><blockquote><p>​        如果<code>position</code>值大于等于字符串的长度，将会直接返回字符串的长度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">11</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">13</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11</span></span><br><span class="line"> <span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&#x27;</span>, <span class="number">22</span>) <span class="comment">// 返回 11 position的值大于字符串的长度11，则返回字符串长度11                </span></span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h3></li></ul><h4 id="检测是否存在某字符串。"><a href="#检测是否存在某字符串。" class="headerlink" title="检测是否存在某字符串。"></a>检测是否存在某字符串。</h4><p>​        当检查字符串中是否出现特定的子字符串时，正确的检查方法是测试返回值是否为 <code>-1</code>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Blue Whale&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Blue&#x27;</span>) !== -<span class="number">1</span>  <span class="comment">// true; found &#x27;Blue&#x27; in &#x27;Blue Whale&#x27;</span></span><br><span class="line"><span class="string">&#x27;Blue Whale&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Bloe&#x27;</span>) !== -<span class="number">1</span>  <span class="comment">// false; no &#x27;Bloe&#x27; in &#x27;Blue Whale&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="使用-indexOf-统计一个字符串中某个字母出现的次数"><a href="#使用-indexOf-统计一个字符串中某个字母出现的次数" class="headerlink" title="使用 indexOf() 统计一个字符串中某个字母出现的次数"></a>使用 indexOf() 统计一个字符串中某个字母出现的次数</h4><p>​        在下例中，使用 <code>count</code> 来记录字母 <code>e</code> 在字符串 <code>str</code> 中出现的次数：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻译：生存还是毁灭？这是个问题。（莎士比亚《哈姆雷特》）</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;To be, or not to be, that is the question.&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> position = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (position !== -<span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">position = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>, position + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// displays 4</span></span><br></pre></td></tr></table></figure><h2 id="数组-Array-中的indexOf-方法"><a href="#数组-Array-中的indexOf-方法" class="headerlink" title="数组(Array)中的indexOf()方法"></a>数组(Array)中的indexOf()方法</h2><blockquote><ul><li><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">indexOf</span>(searchElement)</span><br><span class="line"><span class="title function_">indexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><blockquote><ul><li><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3></li></ul><ol><li><p><code>searchElement(必需)</code>,需要查找的元素，类型不固定。</p></li><li><p><code>fromIndex(可选)</code>，整数类型，开始查找的位置，数组中的下标。</p></li></ol><p>  若不提供参数，默认从<code>0</code>开始。</p><p>​       开始查找的位置。如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回 -1。</p><p>​       如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即 -1 表示从最后一个元素开始查找，-2 表示从倒数第                     二个元素开始查找，以此类推。</p><pre><code>  注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍       小于 0，则整个数组都将会被查询。其默认值为 0。</code></pre><ul><li><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3></li></ul><p>​       首个被找到的元素在数组中的索引位置; 若没有找到则返回 <strong>-1</strong>。</p><p>​       注意：不提供<code>searchElement</code>该参数，或者提供空字符串，返回值都为-1。</p><ul><li><h3 id="常用场景-1"><a href="#常用场景-1" class="headerlink" title="常用场景"></a>常用场景</h3></li></ul><h4 id="找出指定元素出现的所有位置"><a href="#找出指定元素出现的所有位置" class="headerlink" title="找出指定元素出现的所有位置"></a>找出指定元素出现的所有位置</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> indices = [];</span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> element = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> idx = array.<span class="title function_">indexOf</span>(element);</span><br><span class="line"><span class="keyword">while</span> (idx !== -<span class="number">1</span>) &#123;</span><br><span class="line">  indices.<span class="title function_">push</span>(idx);</span><br><span class="line">  idx = array.<span class="title function_">indexOf</span>(element, idx + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(indices);</span><br><span class="line"><span class="comment">// [0, 2, 4]</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="判断一个元素是否在数组里，不在则更新数组"><a href="#判断一个元素是否在数组里，不在则更新数组" class="headerlink" title="判断一个元素是否在数组里，不在则更新数组"></a>判断一个元素是否在数组里，不在则更新数组</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateVegetablesCollection</span> (veggies, veggie) &#123;</span><br><span class="line">  <span class="keyword">if</span> (veggies.<span class="title function_">indexOf</span>(veggie) === -<span class="number">1</span>) &#123;</span><br><span class="line">    veggies.<span class="title function_">push</span>(veggie);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`New veggies collection is: <span class="subst">$&#123;veggies&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;veggie&#125;</span> already exists in the veggies collection.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> veggies = [<span class="string">&#x27;potato&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;chillies&#x27;</span>, <span class="string">&#x27;green-pepper&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateVegetablesCollection</span>(veggies, <span class="string">&#x27;spinach&#x27;</span>);</span><br><span class="line"><span class="comment">// New veggies collection is: potato,tomato,chillies,green-pepper,spinach</span></span><br><span class="line"><span class="title function_">updateVegetablesCollection</span>(veggies, <span class="string">&#x27;spinach&#x27;</span>);</span><br><span class="line"><span class="comment">// spinach already exists in the veggies collection.</span></span><br></pre></td></tr></table></figure><h2 id="字符串中的indexOf-方法与数组中的indexOf-方法的相同点和不同点"><a href="#字符串中的indexOf-方法与数组中的indexOf-方法的相同点和不同点" class="headerlink" title="字符串中的indexOf()方法与数组中的indexOf()方法的相同点和不同点"></a>字符串中的indexOf()方法与数组中的indexOf()方法的相同点和不同点</h2><blockquote><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都是用来查找某一元素的</li><li>都有两个参数，要查找的元素，开始查找的位置</li><li>查找字符串时严格区分大小写</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>传要查找参数时，字符串的indexOf()方法会把不是字符串的参数，类型转换为字符串类型，数组不会。</li><li>传入起始查找的参数时，字符串的参数不支持负数。数组支持负数，传负数时，会从最后一个元素下标开始抵消。</li><li>返回值在某些情况下有所不同，字符串<code>searchString</code>参数为空字符串时，可能有多种返回结果。</li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/22/JavaScript%E4%B8%AD%E7%9A%84indexOf()%E6%96%B9%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript数组去重讲解详细版</title>
      <link>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/</link>
      <guid>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/</guid>
      <pubDate>Sat, 18 Mar 2023 12:13:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript数组去重讲解详细&quot;&gt;&lt;a href=&quot;#JavaScript数组去重讲解详细&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组去重讲解详细&quot;&gt;&lt;/a&gt;&lt;strong&gt;JavaScript数组去重讲解详细&lt;/stro</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript数组去重讲解详细"><a href="#JavaScript数组去重讲解详细" class="headerlink" title="JavaScript数组去重讲解详细"></a><strong>JavaScript数组去重讲解详细</strong></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><blockquote><p><strong>博主也是刚刚开始水面试题才去了解JavaScript,并没有系统地去学习过JavaScript，如果博客或者其他博文有哪里不正确，不足的地方，欢迎各位指正、补充。话不多说，其实方法都一样（我就是加以自己的理解,也不知道对不对）例子均来自<a href="https://www.nowcoder.com/issue/tutorial?tutorialId=96&uuid=24304825a0c04ea9a53cdb09cb664834">牛客面试题</a>。</strong></p></blockquote><h2 id="1-利用ES6-Set去重（ES6中最常用）"><a href="#1-利用ES6-Set去重（ES6中最常用）" class="headerlink" title="1. 利用ES6 Set去重（ES6中最常用）"></a><strong>1. 利用ES6 Set去重（ES6中最常用）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"> <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><p><strong>这是使用了ES6中新增的<code>Array.from(</code>)和<code>Set()</code>来进行去重。</strong></p><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>使用<code>Set</code>数据结构来去重，将数组转为Set结构，再将Set结构转回数组。</strong></li><li><strong>返回去重后的数组。</strong></li></ol><ul><li><strong><code>Array.from()</code> 方法用于将类数<code>组对象( array-like object )</code> 和<code>可遍历对象( iterable object ) </code>转化为一个新的数组实例。</strong></li><li><strong><code>Set() </code>是ES6新增的数据结构，用于存储唯一的值，不允许重复。它类似于数组，但是成员的值都是唯一的。</strong></li></ul><p><strong>因此，首先将输入的数组转化为一个<code>Set</code>数据结构（利用Set可以去除重复项），然后再将<code>Set</code>数据结构转化为数组返回给用户。</strong></p><p><strong>在这个例子中，输入的数组<code>arr</code>包含了不同数据类型的元素，包括数字、字符串、布尔值、undefined、null、以及对象等。其中NaN存在特别的问题，<code>Set()</code> 中的<code>NaN值</code>可以去重，但是两个NaN之间不相等，因此去重的结果中只会保留一个NaN。</strong></p><p><strong>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</strong></p></blockquote><h2 id="2-利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#2-利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="2. 利用for嵌套for，然后splice去重（ES5中最常用）"></a><strong>2. 利用for嵌套for，然后splice去重（ES5中最常用）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><p><strong>采用双重循环和splice方法，双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</strong></p><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>使用双重循环来遍历数组中的每一个元素，并找到数组中的重复元素。</strong></li><li><strong>如果找到数组中的两个元素相同，那么就使用<code>splice</code>方法删除第二个元素，并将内层循环的计数器j减1，从而保证循环安全、完整。</strong></li><li><strong>返回去重后的数组。</strong></li></ol><p><strong>在循环操作中，对于每一个元素，它会从它后面的元素开始逐个比较，如果发现有相同的元素，则使用splice方法将后面的元素删除，并且j自减1。因为splice方法的调用，这个嵌套的循环可能需要执行许多次，性能上会比Set方法慢一些。</strong></p><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>NaN与对象一样，被认为是不同的元素类型，因此在此方法中不能移除掉数组中的所有NaN。</strong></li><li><strong>原数组中有两个null，但是在去重后，这两个null却被消失了，这是因为<code>splice</code>方法在使用时，可能会引起数组索引的变更，会影响当前的循环操作。</strong></li><li><strong>数组中的元素类型过于多样化时，并不容易保证去重的结果正确，比如在此例子中，两个{}对象并没有被移除，因为两个空对象之间是无法被“==”比较的。</strong></li></ul></blockquote><h2 id="3-利用indexOf去重"><a href="#3-利用indexOf去重" class="headerlink" title="3. 利用indexOf去重"></a><strong>3. 利用indexOf去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">   <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>定义了一个变量<code>array</code>，用于存储去重后的数组。</strong></li><li><strong>使用for循环遍历传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>array</code>数组中不存在该元素，则将该元素加入array数组中。</strong></li><li><strong>返回去重后的<code>array</code>数组。</strong></li></ol><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>与第二种方法一样，这个方法也无法正确地去重NaN和{}对象。</strong></li><li><strong>该方法的执行效率不如第一个方法Fast Set（ES6新增的Set）和第二个方法while+hasOwnProperty实现的快速去重。</strong></li></ul></blockquote><h2 id="4-利用sort"><a href="#4-利用sort" class="headerlink" title="4. 利用sort()"></a><strong>4. 利用sort()</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>定义了一个函数<code>unique</code>，该函数接受一个数组作为参数。</strong></li><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>对传入的数组进行排序。</strong></li><li><strong>定义了两个变量<code>arrry</code>和<code>obj</code>，分别用于存储去重后的数组和存储数组元素出现次数的对象。</strong></li><li><strong>将排序后的数组的第一个元素加入到<code>arrry</code>数组中。</strong></li><li><strong>使用for循环遍历排序后的传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>arr[i]</code>和<code>arr[i-1]</code>的值不相等，那么就将该元素加入到<code>arrry</code>数组中，实现去重。</strong></li><li><strong>最后返回去重后的数组<code>arrry</code>。</strong></li></ol><p><strong>然后函数返回去重后的数组。但是这个方法存在一些问题，比如：</strong></p><ul><li><strong>与前面三种方法一样，这个方法无法正确地去重包括NaN和{}对象在内的某些数据类型。在此例子中，NaN和{}对象没有被正确去重，而且它们还变得更多了（排序后相邻的NaN变成了3个，{}对象也变成了2个）。</strong></li><li><strong>类型不同的数据进行排序后，得到的可能并不是想要的顺序，比如在此例子中，数字0出现在了末尾。</strong></li></ul></blockquote><h2 id="5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a><strong>5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">     <span class="keyword">var</span>  obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    //两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>检测传入的参数是否为数组，如果不是则打印出’type error’的错误信息，并结束函数的执行。</strong></li><li><strong>定义了两个变量<code>arrry</code>和<code>obj</code>，分别用于存储去重后的数组和存储数组元素出现次数的对象。</strong></li><li><strong>使用for循环遍历传入的数组，取出数组中的每一个元素。</strong></li><li><strong>如果<code>obj</code>对象中未出现这个元素，即该元素没有出现过，就将它加入到<code>arrry</code>数组中，并给相应的<code>obj</code>属性赋初值1表示出现了一次。</strong></li><li><strong>如果<code>obj</code>对象中已经出现了该元素，那么就只将相应<code>obj</code>的属性值加1，表示该元素又出现了一次。</strong></li><li><strong>最后返回去重后的数组<code>arrry</code>。</strong></li></ol><p><strong>然后函数返回去重后的元素数组。但是这个方法也存在一些问题，比如：</strong></p><ul><li><strong>与前面所有方法一样，这个方法也无法正确地去重包括NaN和{}对象在内的某些数据类型。但是在此例子中，这个方法可以正确地去除所有重复元素。</strong></li><li><strong>此方法可能会改变数组中元素的顺序，因为在循环遍历数组时，对象的属性遍历顺序并不是按照数组元素的出现顺序，因此去重结果有可能不是原数组中元素的原始顺序。</strong></li></ul></blockquote><h2 id="6-利用includes"><a href="#6-利用includes" class="headerlink" title="6. 利用includes"></a><strong>6. 利用includes</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                    array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>在函数内部，先检查传入的参数是否为数组，如果不是则打印一条类型错误的消息，并退出函数；否则继续下一步。</strong></li><li><strong>创建一个新的空数组 <code>array</code>，用于存储去重后的结果。</strong></li><li><strong>使用 for 循环遍历原始数组 <code>arr</code>，在遍历过程中对每个元素进行判断，如果 <code>array</code> 中不包含该元素，就将其添加到 <code>array</code> 数组中。</strong></li><li><strong>遍历完成后，返回 <code>array</code> 数组，其中包含了原始数组中的所有不重复元素。</strong></li><li><strong>注意，由于 <code>includes</code> 方法无法去重对象类型，所以在最终的结果中仍会保留数组中出现的对象值。</strong></li></ol><p><strong>然后函数返回去重后的元素数组。但是这个方法也存在一些问题，比如：</strong></p><ul><li><strong>与前面所有方法一样，这个方法也无法正确地去重包括{}对象在内的某些数据类型。在此例子中，两个空对象没有被正确去除。</strong></li><li><strong>includes方法ES7新增，不是所有浏览器均支持这个方法。</strong></li></ul></blockquote><h2 id="7-利用hasOwnProperty"><a href="#7-利用hasOwnProperty" class="headerlink" title="7. 利用hasOwnProperty"></a><strong>7. 利用hasOwnProperty</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><h3 id="解释-6"><a href="#解释-6" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个空对象 <code>obj</code>。</strong></li><li><strong>使用 <code>filter</code> 函数来遍历数组。<code>filter</code> 函数对数组中所有元素执行给定的函数，返回一个新数组，该数组中的所有元素都是在测试函数中返回 true 的原始数组元素。</strong></li><li><strong>在 <code>filter</code> 函数中，使用匿名函数来检查当前元素是否已经在原数组中出现。为了避免比较数据类型，使用 typeof 操作符获取其类型，并将其与元素值结合为一个字符串 <code>typeof item + item</code>。</strong></li><li><strong>在每次遍历过程中，使用 <code>hasOwnProperty</code> 检查对象 <code>obj</code> 中是否已经存在当前元素。如果存在，则返回 false，不加入到结果数组中。</strong></li><li><strong>如果不存在，则将当前元素添加到 <code>obj</code> 对象中，并返回 true，将其加入到新数组中。</strong></li><li><strong>遍历完成后，返回已经去重的数组。</strong></li></ol></blockquote><h2 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8. 利用filter"></a><strong>8. 利用filter</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释-7"><a href="#解释-7" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>使用 <code>filter</code> 函数来遍历数组。<code>filter</code> 函数对数组中所有元素执行给定的函数，返回一个新数组，该数组中的所有元素都是在测试函数中返回 true 的原始数组元素。</strong></li><li><strong>在 <code>filter</code> 函数中，使用匿名函数来检查当前元素是否已经在原数组中出现。使用 <code>indexOf</code> 方法查找当前元素在原始数组中的第一个索引，如果索引值与当前索引值相等，即表示当前元素是在原始数组中第一次出现，将其添加到结果数组中。</strong></li><li><strong>如果当前索引不是第一次出现，即与原始数组中其他索引值相等，则不添加到结果数组中。</strong></li><li><strong>遍历完成后，返回已经去重的数组。</strong></li></ol><ul><li><strong>此方法在遍历数组的过程中会多次调用<code> indexOf</code> 方法，又由于<code>indexOf</code>方法的时间复杂度为 O(n)，因此其效率可能不够高。</strong></li><li><strong>该方法可能不适用于处理元素为对象的数组，因为对象的引用地址不同，虽然对象具有相同的类型和值，但是 <code>indexOf</code> 方法不会被认为两个不同的对象是相同的元素，因此无法对它们去重。</strong></li></ul></blockquote><h2 id="9-利用递归去重"><a href="#9-利用递归去重" class="headerlink" title="9. 利用递归去重"></a><strong>9. 利用递归去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> array= arr;</span><br><span class="line">        <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>])&#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="解释-8"><a href="#解释-8" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code>并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个新的变量 <code>array</code> 并将其值设置为传入参数的值。</strong></li><li><strong>创建一个变量 <code>len</code> 并将其赋值为 <code>array</code> 数组的长度。</strong></li><li><strong>使用 <code>sort()</code> 函数对 <code>array</code> 数组进行排序。这么做是为了更方便地进行数组去重。</strong></li><li><strong>函数中创建了一个名为 <code>loop</code> 的内部函数。<code>loop</code> 函数使用递归的方法遍历数组，比较前后两个元素是否相等，如果相等，则将后一个元素从数组中删除。</strong></li><li><strong>调用 <code>loop(len-1)</code> 函数，开始遍历 <code>array</code> 数组。</strong></li><li><strong>函数返回 <code>array</code> 数组（已经去除了重复元素）。</strong></li></ol></blockquote><h2 id="10-利用Map数据结构去重"><a href="#10-利用Map数据结构去重" class="headerlink" title="10. 利用Map数据结构去重"></a><strong>10. 利用Map数据结构去重</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">      array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="解释-9"><a href="#解释-9" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>arrayNonRepeatfy</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>创建一个新的 Map 对象 <code>map</code>，用于存储数组中的值。</strong></li><li><strong>创建一个新的数组 <code>array</code>，用于存储去重后的结果。</strong></li><li><strong>使用 for 循环遍历数组 <code>arr</code>。在遍历过程中，获取当前元素的值。使用 Map 的 has() 方法检查该元素是否已经存在于 Map 中。</strong></li><li><strong>如果存在，将该元素对应的 Map 的 value 值设为 true。</strong></li><li><strong>如果不存在，则将该元素加入到数组 <code>array</code> 中，并将 Map 的 value 值设为 false。</strong></li><li><strong>遍历完成后，返回已经去重的数组 <code>array</code>。</strong></li></ol></blockquote><h2 id="11-利用reduce-includes"><a href="#11-利用reduce-includes" class="headerlink" title="11. 利用reduce+includes"></a><strong>11. 利用reduce+includes</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="解释-10"><a href="#解释-10" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>创建一个函数 <code>unique</code> 并传入一个参数 <code>arr</code>，这个参数 <code>arr</code> 是需要去重的数组。</strong></li><li><strong>使用 <code>reduce</code> 函数来遍历数组。<code>reduce</code> 函数将数组元素传递给指定的函数，返回一个输出结果。初始值为空数组[]。</strong></li><li><strong>在 <code>reduce</code> 函数中，使用箭头函数处理每个元素。如果这个元素没有在初始值数组 <code>prev</code> 中出现过，那么就将这个元素放入数组 <code>prev</code> 中，使用逗号运算符返回新数组[…prev,cur]。</strong></li><li><strong>如果元素已经出现在 <code>prev</code> 数组中，那么就返回之前的 <code>prev</code> 数组，从而达到去重的目的，即 return prev。</strong></li><li><strong>遍历完成后，返回已经去重的数组 <code>prev</code>。</strong></li></ol></blockquote><h2 id="12-…new-Set-arr"><a href="#12-…new-Set-arr" class="headerlink" title="12. […new Set(arr)]"></a><strong>12. […new Set(arr)]</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] </span><br></pre></td></tr></table></figure><h3 id="解释-11"><a href="#解释-11" class="headerlink" title="解释"></a><strong>解释</strong></h3><blockquote><ol><li><strong>在 ES6 中，Set 是一种新的数据结构，表示一组无序且唯一的值。Set 可以接收一个可迭代对象，比如数组，在迭代对象中进行去重操作。</strong></li><li><strong>将数组 <code>arr</code> 传递给 Set 构造函数，它会自动去除数组中的重复项。</strong></li><li><strong>使用扩展运算符<code>[...]</code>将 Set 转换成数组，从而实现去重。</strong></li><li><strong>返回已经去重的数组。</strong></li></ol></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2023/03/18/JavaScript%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E8%AE%B2%E8%A7%A3%E8%AF%A6%E7%BB%86%E7%89%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git基本使用及常用命令</title>
      <link>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <guid>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Thu, 16 Mar 2023 12:33:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Git学习笔记&quot;&gt;&lt;a href=&quot;#Git学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Git学习笔记&quot;&gt;&lt;/a&gt;Git学习笔记&lt;/h1&gt;&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>提交分三步</p><p>第一 <code>git add .</code> 修改添加到缓存区</p><p>第二 <code>git commit -m &#39;修改内容说明&#39;</code>提交缓存区文件</p><p>第三 <code>git push</code> 向远程仓库推送。</p></blockquote><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h4><blockquote><p><code>git config</code> 命令用于获取并设置存储库或全局选项（一般刚下载的git需要配置用户名和用户邮箱，以获取获取代码的权限）</p><p>可以通过<code>git config</code>来配置用户名和邮箱地址，便于我们将代码提交到远程仓库</p><p><code>git config --global user.name &#39;你的用户名&#39;</code><br><code>git config --global user.email &#39;你的邮箱&#39;</code></p><p>如果去掉 –global 参数只对当前仓库有效.</p></blockquote><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><blockquote><p>命令格式：<code>git init</code></p><p><code>git init</code>: 用于初始化厂库</p><p>使用<code>git init</code> 命令后，会在命令输入的根目录下生成一个<code>.git</code>目录，该目录包括了一些资源数据。</p><p>也可以 <code>git init  文件名或路径</code> 在指定路径目录下初始化厂库、生成<code>.git</code>文件。 </p></blockquote><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><blockquote><p>命令格式：<code>git clone</code></p><p><code>git clone</code> ：将远程仓库的资源克隆到本地</p><p><code>git clone &lt;url&gt; [directory]</code></p><p>此命令的两个参数 <code>url</code>为仓库地址，<code>directory</code>为本地路径。<code>directory</code>可以省略，则默认会克隆<code>url</code>地址下的仓库到当前命令行输入路径。</p></blockquote><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><blockquote><p>命令格式：<code>git add [file1] [file2] ...</code></p><p>添加文件到暂存区：<br><code>git add file</code></p><p>添加指定目录到暂存区，包括子目录：</p><p><code>git add [dir]</code></p><p>常用命令为添加当前目录下的所有文件到暂存区：</p><p><code>git add .</code></p><p>当然我们也可以指定某一类文件，如将java文件添加到缓存中，可以使用如下命令：</p><p><code>git add *.java</code></p></blockquote><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><blockquote><p>命令格式：<code>git commit -m [message]</code></p><p><code>[message]</code> 可以是一些备注信息。</p><p><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交:</p><p><code>git commit -a</code></p></blockquote><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></p><p>将本地分支的更新，推送到远程仓库中。</p><p>实例：<code>git push origin newbranch:newbranch </code></p><p>如果本地分支名与远程分支名相同，则可以省略 <code>：&lt;远程分支名&gt;</code></p><p>如果本地版本与远程版本有差异，但又要强制推送可以使用 –force 参数：</p><p><code>git push --force origin master</code></p><p>删除主机的分支可以使用 –delete 参数，以下命令表示删除 origin 主机的 master 分支:</p><p><code>git push origin --delete master</code></p></blockquote><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><blockquote><p>命令格式：<code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p><p><code>git pull</code> 其实就是 <code>git fetch</code> 和 <code>git merge FETCH_HEAD</code> 的简写。</p><p><code>git pull</code>命令将远程仓库的资源拉取到本地。常用的用法，切换到主分支，然后<code>git pull</code>就可以了，此命令相当于本地主分支的资源与远程的仓库资源做了同步</p><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并:</p><p><code>git pull origin master:brantest</code></p><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略 <code>：&lt;本地分支名&gt;</code></p></blockquote><h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h4><blockquote><p>从远程仓库中下载资源，且和pull不一样，pull会合并资源，fetch不会</p></blockquote><h4 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h4><blockquote><p>命令格式：<code>git rm &lt;file&gt;</code></p><p><code>git rm &lt;file&gt;</code> 将文件从工作区和暂存区删除</p><p><code>git rm</code>用于删除文件</p><p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 <code>Changes not staged for commit</code> 的提示.</p><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p><p><code>git rm -f &lt;file&gt;</code></p><p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可</p><p><code>git rm --cached &lt;file&gt;</code></p><p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p><p><code>git rm –r *</code></p></blockquote><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><blockquote><p>命令格式：<code>git mv [file] [newfile] </code></p><p>git mv 命令用于移动或重命名一个文件、目录、软连接，如要将一个test.txt文件重命名为newtest.txt，则可以使用如下命令：</p><p><code>git mv test.txt newtest.txt</code></p><p>如果新文件名已经存在，但还是要重命名它，可以使用 <strong>-f</strong> 参数：</p><p><code>git mv -f [file] [newfile]</code></p></blockquote><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><blockquote><p><em><strong>git branch</strong></em> 有多种命令格式：</p><ul><li>**<code>git branch</code>**：查看分支命令，其中<code>*</code>号的分支为当前所在分支。<code>git branch -a</code>查看本地分支和远程分支</li><li>**<code>git branch (branchname)</code>**：创建分支命令， 我们也可以使用 <strong><code>git checkout -b (branchname)</code></strong> 命令来创建新分支并立即切换到该分支下，从而在该分支中操作</li><li>**<code>git checkout (branchname)</code>**：切换分支命令</li><li><strong><code>git branch -delete (branchname)</code><strong>：删除分支命令,可以简化为</strong><code>git branch -d (branchname)</code></strong></li></ul></blockquote><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><blockquote><p>命令格式：<code>git merge &lt;需要合并的分支&gt;</code></p><p><code>git merge &lt;需要合并的分支&gt;</code>该命令执行后，会将<code>需要合并的分支</code>合并到<code>当前分支</code></p></blockquote><h4 id="Git-标签"><a href="#Git-标签" class="headerlink" title="Git 标签"></a>Git 标签</h4><blockquote><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 runoob 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。不用 -a 选项也可以执行的，但它不会记录这标签是啥.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v1.0 </span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag -a v0.9 85fc7e7</span><br><span class="line">&gt;$ git log --oneline --decorate --graph</span><br><span class="line">&gt;*   d5e9fc2 (HEAD -&gt; master) Merge branch &#x27;change_site&#x27;</span><br><span class="line">&gt;|\  </span><br><span class="line">&gt;| * 7774248 (change_site) changed the runoob.php</span><br><span class="line">&gt;* | c68142b 修改代码</span><br><span class="line">&gt;|/  </span><br><span class="line">&gt;* c1501a2 removed test.txt、add runoob.php</span><br><span class="line">&gt;* 3e92c19 add test.txt</span><br><span class="line">&gt;* 3b58100 (tag: v0.9) 第一次版本提交</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ git tag</span><br><span class="line">&gt;v0.9</span><br><span class="line">&gt;v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h3><p>前面我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。本本将使用 Github 作为远程仓库，来介绍Git 远程仓库的使用。</p><p>下面介绍远程仓库常用的几种指令：</p><ul><li><code>git remote add</code>：添加远程仓库</li><li><code>git remote</code>：查看当前的远程仓库</li><li><code>git fetch</code>、<code>git pull</code>：提取远程仓仓库</li><li><code>git push</code>：推送到远程仓库</li><li><code>git remote rm</code>：删除远程仓库</li></ul><h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><blockquote><p>命令格式：<code>git remote add [alias] [url]</code></p><p>参数[alias]为别名， <code>[url]</code>为远程仓库的地址，如：我们可以将<a href="https://github.com/Yhq00/Yhq00.github.io.git">https://github.com/Yhq00/Yhq00.github.io.git</a></p><p>仓库添加到本地，并命名为test，操作如下：</p><p><code>git remote add https://github.com/Yhq00/Yhq00.github.io.git </code></p></blockquote><h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h4><blockquote><p>命令格式：<code>git remote</code>，该命令可以查看当前有哪些远程仓库</p></blockquote><h4 id="git-fetch、git-pull"><a href="#git-fetch、git-pull" class="headerlink" title="git fetch、git pull"></a>git fetch、git pull</h4><blockquote><p>命令格式：<code>git fetch [alias]</code>、<code>git pull [alias]</code></p><p><code>git fetch</code>、<code>git pull</code>可以提取远程仓库的数据，如果有多个远程仓库，我们可以在后面加仓库的别名，操作如下:</p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch [仓库别名]</code></p><p><code>git fetch</code>和<code>git pull</code>的区别：</p><ol><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动合并。</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地。</li></ol></blockquote><h4 id="git-push-1"><a href="#git-push-1" class="headerlink" title="git push"></a>git push</h4><blockquote><p>命令格式：<code>git push [alias] [branch]</code></p><p>该命令会推送你的新分支与数据到某个远端仓库.</p></blockquote><h4 id="git-remote-rm"><a href="#git-remote-rm" class="headerlink" title="git remote rm"></a>git remote rm</h4><blockquote><p>命令格式: <code>git remote rm [alias]</code></p><p><code>git remote rm</code>删除远程仓库</p></blockquote><p>到此，基本的git操作就介绍完了。</p><p>参考自:</p><p><a href="https://blog.csdn.net/qtiao/article/details/97783243">Git 常用基本命令使用详细大全_git常用命令_坚强的小水滴的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/git/git-tutorial.html">菜鸟Git教程</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Git%E4%BD%BF%E7%94%A8/">Git使用</category>
      
      
      <category domain="http://example.com/tags/Git/">Git</category>
      
      
      <comments>http://example.com/2023/03/16/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>文件路径注重点及网络路径和本地路径</title>
      <link>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</link>
      <guid>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/</guid>
      <pubDate>Mon, 13 Mar 2023 23:59:32 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用&lt;code&gt;\&lt;/code&gt;img&lt;code&gt;\&lt;/code&gt;yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>昨天利用hexo部署发布写好的博客时，出现了一个很奇怪的问题，用Markdown语法插入图片。使用<code>\</code>img<code>\</code>yxl.png一直出错，但是在本地利用hexo s命令查看localhost：4000端口，图片能加载，传到网络服务器上缺不可以加载，后来研究了一下原来是<code>\</code>的原因，特此记录一下。</p></blockquote><blockquote><p>Unix使用斜杆/ 作为路径分隔符，而web应用最新使用在Unix系统上面，所以目前所有的网络地址都采用 斜杆/ 作为分隔符。<br>Windows由于使用 斜杆/ 作为DOS命令提示符的参数标志了，为了不混淆，所以采用 反斜杠\ 作为路径分隔符。所以目前windows系统上的文件浏览器都是用 反斜杠\ 作为路径分隔符。随着发展，DOS系统已经被淘汰了，命令提示符也用的很少，斜杆和反斜杠在大多数情况下可以互换，没有影响。<br>知道这个背景后，可以总结一下结论：<br>（1）浏览器地址栏网址使用 斜杆/ ;<br>（2）windows文件浏览器上使用 反斜杠\ ;<br>（3）出现在html url() 属性中的路径，指定的路径是网络路径，所以必须用 斜杆/ ;<br><code>// 如果url后面用反斜杠\，就不会显示任何背景</code><br>（4）出现在普通字符串中的路径，如果代表的是windows文件路径，则使用斜杆/和反斜杠\是一样的如果代表的是网络文件路径，则必须使用 斜杆/ ;<br><code>// 本地文件路径，/ 和 \ 是等效的</code><br><code>// 网络文件路径，一定要使用 斜杆/</code><br>（5）windows系统的地址栏能够识别单反斜杠”\“，而不能识别双反斜杠”\\“，这是系统文件系统自身的约定，路径层次使用“\”区分而不是使用“\\”来区分：<br>所以F:\\Office\\Trunk__Out\\Pro Debug\\Bin\\OfficeInfo.dll这样是不正确的。<br>而在程序中，字符串中的“\”主要是为了转义，“\”转义后被理解为“\”,“\”才能够被操作系统文件系统所理解，比如用字符串表示上述路径：“F:\Office\Trunk\__Out\Pro Debug\Bin\OfficeInfo.dll”，同理，如果想要表示“\”，可以写作“\\”。</p></blockquote><blockquote><p>在不同系统的情况系 indows下是,linux和unix下是/ ,但在Windows中没有本质区别。<br>但是由于 \ 也是转义字符的起始字符，<br>所以，路径中的 \ 通常需要使用 \如果是 / 就不需要使用转义了<br>如C中文件操作，c:\kkk\dd.txt c:/kkk/dd.txt一样<br>“./“：代表目前所在的目录<br>“../“：代表上一层目录<br>\ 用于本地/ 用于网络连接地址</p></blockquote><p><a href="https://www.cnblogs.com/lhang55/p/7616816.html#:~:text=%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%EF%BC%9A%2F%E5%92%8C%E7%9A%84%E5%8C%BA%E5%88%AB%20Unix%E4%BD%BF%E7%94%A8%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%EF%BC%8C%E8%80%8Cweb%E5%BA%94%E7%94%A8%E6%9C%80%E6%96%B0%E4%BD%BF%E7%94%A8%E5%9C%A8Unix%E7%B3%BB%E7%BB%9F%E4%B8%8A%E9%9D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E7%9B%AE%E5%89%8D%E6%89%80%E6%9C%89%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E9%83%BD%E9%87%87%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BA%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82,Windows%E7%94%B1%E4%BA%8E%E4%BD%BF%E7%94%A8%20%E6%96%9C%E6%9D%86%2F%20%E4%BD%9C%E4%B8%BADOS%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E7%9A%84%E5%8F%82%E6%95%B0%E6%A0%87%E5%BF%97%E4%BA%86%EF%BC%8C%E4%B8%BA%E4%BA%86%E4%B8%8D%E6%B7%B7%E6%B7%86%EF%BC%8C%E6%89%80%E4%BB%A5%E9%87%87%E7%94%A8%20%E5%8F%8D%E6%96%9C%E6%9D%A0%20%E4%BD%9C%E4%B8%BA%E8%B7%AF%E5%BE%84%E5%88%86%E9%9A%94%E7%AC%A6%E3%80%82">参考转载自：此链接</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="http://example.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <comments>http://example.com/2023/03/14/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E6%B3%A8%E9%87%8D%E7%82%B9%E5%8F%8A%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E5%92%8C%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript输出</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript输出&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript不提供任何内建的打印或显示函数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 显示方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Win</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><p><strong>JavaScript输出</strong></p><hr><p>JavaScript不提供任何内建的打印或显示函数。</p><hr><p><strong>JavaScript 显示方式</strong></p><ul><li>使用Window.alert( ) 写入警告框</li><li>使用document.write( )写入HTML输出</li><li>使用innerHTML 写入HTML元素</li><li>使用console.log()写入浏览器控制台</li></ul><p><strong>实例：</strong></p><ol><li><p>使用Window.alert( ) 写入警告框</p><p><img src="/./img/JS1.png" alt="JS1"></p></li></ol><p>2.使用document.write( )写入HTML输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(5 + 6)&quot;</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击前：</p><p><img src="/./img/js2-1.png" alt="js211"></p><p>点击后：</p><p><img src="/./img/js2-2.png" alt="js2-2"></p><p><strong>注意：</strong>在 HTML 文档完全加载后使用 <code>document.write()</code> 将<em>删除所有已有的 HTML</em></p><p><strong>提示：</strong><code>document.write()</code> 方法仅用于测试</p><p>3.使用innerHTML 写入HTML元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="number">5</span> + <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/./img/js3.png" alt="js3"></p><p><strong>提示：</strong>更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><p>4.使用console.log()写入浏览器控制台</p><p><img src="/./img/js4.png" alt="js4"></p><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript原型链</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;JavaScript原型链&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要搞清楚原型链，我们首先了解什么是&lt;code&gt;原型&lt;/code&gt;？每个函数都有&lt;code&gt;prototype&lt;/code&gt;属性，我们称之为&lt;code&gt;原型&lt;/code&gt;,又</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>JavaScript原型链</strong></p><blockquote><p>要搞清楚原型链，我们首先了解什么是<code>原型</code>？每个函数都有<code>prototype</code>属性，我们称之为<code>原型</code>,又因为这个属性的值是一个对象，所以我们也称为<code>原型对象</code>。</p><p>那么什么是<code>对象</code>呢？</p><p>这里我们要了解在JavaScript中对象是一种引用数据类型。我们可以通过很多种方式来创建一个对象。我们常用构造函数的方式来创建一个对象：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成实列</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;小明&#x27;</span>，<span class="number">16</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>  那么，函数与对象的关系是怎么样的呢？</p><ul><li>函数是对象，对象都是通过函数创建的。</li><li>函数与对象并不是简单的包含与被包含的关系。</li></ul></blockquote><blockquote><p>在我们上面创建的对象中，通过定义常量实例化后，在原来<code>构造函数</code>中通过<code>this</code>赋值的方法或者属性，已经在实例化后成为了每个实例的<code>实例属性</code>和<code>实例方法</code>，无法共享公共属性和方法。所以设计出了一个<code>原型对象</code>，来存储这个构造函数的公共属性及方法。</p></blockquote><blockquote><p>我们再下面一段代码了加深一下理解：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age,sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line"><span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法 打印：张三说：hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到我们实例对象实例<code>p1</code>调用到<code>Person</code>这个<code>构造函数</code>的<code>原型对象</code>上的say()方法。但是为什么呢？明明只有在<code>构造函数</code>内部通过<code>this</code>来赋值的属性或者方法才会被实例所继承，为什么在<code>构造函数</code>的<code>原型对象</code>上定义的<code>say</code>方法也能通过实例来调用到呢？这里就引出了<code>原型链</code>这个概念。</p></blockquote><blockquote><p>实际上<code>原型对象</code>中存在的<code>构造函数</code>指向了我们function创建的对象。并且每个对象都有一个<code>__proto__</code>属性，这个属性会指向<code>实例对象</code>的<code>构造函数</code>的<code>原型对象</code>，这样使得彼此之间存在一定的指向关系，能够使每个<code>实列化对象</code>能够使用<code>构造函数</code>的<code>原型对象</code>的方法。</p></blockquote><blockquote><p>而这种指向关系，我们就称之为原型链。图解如下：</p></blockquote><p><img src="/./img/yxl.png" alt="11"></p><p>​            </p><p><img src="/./img/11.png" alt="11"></p><blockquote><p>我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p>在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发中需注意点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line">    <span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>); <span class="comment">// 新创建一个Proson实例对象</span></span><br><span class="line">    p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法</span></span><br><span class="line">    p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">    p1.<span class="property">__proto__</span>.<span class="property">do</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;往原型对象中添加方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p2.<span class="title function_">do</span>(); <span class="comment">// 打印出了-往原型对象中添加方法</span></span><br></pre></td></tr></table></figure><hr><p><strong>原型链的尽头</strong></p><hr><blockquote><p>我们可以看到，<code>实例对象</code>的<code>__proto__</code>属性指向了一个<code>构造函数</code>的<code>原型对象</code>，该<code>构造函数的原型对象</code>的<code>_proto_</code>属性指向了<code>Object</code>的<code>原型对象</code>，而其<code>Object的原型对象</code>的<code>_proto_</code>属性指向了null，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><p><img src="/./img/12.png" alt="11"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript第一天被提问的问题</title>
      <link>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</link>
      <guid>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript学习笔记&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记&quot;&gt;&lt;/a&gt;JavaScript学习笔记&lt;/h1&gt;&lt;h6 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h6 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">JavaScript基本数据类型分为Null、Undefined、Boolean、Number、BigInt、String、2015年Symbol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavaScript 数据类型</span><br><span class="line">JavaScript 中有五种可包含值的数据类型：</span><br><span class="line"></span><br><span class="line">字符串（string）</span><br><span class="line">数字（number）</span><br><span class="line">布尔（boolean）</span><br><span class="line">对象（object）</span><br><span class="line">函数（function）</span><br><span class="line">有三种对象类型：</span><br><span class="line"></span><br><span class="line">对象（Object）</span><br><span class="line">日期（Date）</span><br><span class="line">数组（Array）</span><br><span class="line">同时有两种不能包含值的数据类型：</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line"> Null类型只有一个值Null</span><br><span class="line"> Undefined类型只有一个值Undefined</span><br><span class="line"> Boolean类型有两个值true、false</span><br><span class="line"> Number类型表示IEE754标准的双精度64位二进制格式的值(存储 2^-1074（Number.MIN_VALUE）和 2^1024（Number.MAX_VALUE）之</span><br><span class="line"> 的正浮点数，以及 -2^-1074 和 -2^1024 之间的负浮点数，但是它仅能安全地存储在 -(2^53 − 1)（Number.MIN_SAFE_INTEGER）     到2^53 − 1</span><br><span class="line"> BigInt类型在 Javascript 中是一个数字的原始值，它可以表示任意大小的整数。使用 BigInt，你可以安全地存储和操作巨大的整数，甚至   超过 Number 的安全整数限制</span><br><span class="line"> String类型表示文本数据</span><br><span class="line"> Symbol是唯一并且不可变的原始值并且可以用来作为对象属性的键（如下）。在某些程序语言当中，Symbol 也被称作“原子类型”（atom）。     symbol 的目的是去创建一个唯一属性键，保证不会与其他代码中的键产生冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">问题：Js操作数组有哪几种方法？</span><br><span class="line">答案：</span><br><span class="line">length属性。主要用于获得数组内元素的个数，常用于for循环或一些判断语句中取得数组的长度。</span><br><span class="line">concat()方法。用于把两个或多个数组合并成一个数组，数组的索引会按照合并数组的顺序重新排序</span><br><span class="line">join()方法。主要用于将数组内的元素使用字符拼接成一个字符串，不传拼接字符参数，默认使用逗号。</span><br><span class="line">pop()方法。删除数组中最后一个元素，与之相反的方法是push()，向数组的末尾添加一个或多个元素。</span><br><span class="line">reverse()方法。这个方法主要用于反转数组元素，索引数组 reverse后会重新排序。</span><br><span class="line">slice()方法。用于从数组中提取所需要的元素，传入的参数是提取元素开始位置，例如slice(3)，则从下标为3的元素开始提取。</span><br><span class="line">splice()方法。splice()方法需要传入三个参数，第一个参数是索引开始的位置，第二个参数是删除元素的数量，第三个参数是在开始索引的位置插入的元素（可以为多个元素）。</span><br></pre></td></tr></table></figure><p><img src="/./img/1.jpg" alt="1"></p><p><img src="/./img/2.webp" alt="2"></p><p><img src="/./img/3.webp" alt="3"></p><p><img src="/./img/4.webp" alt="4"></p><p><img src="/./img/5.webp" alt="5"></p><p><img src="/./img/6.webp" alt="6"></p><p><img src="/./img/7.webp" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题3：Js输出一个数组内所有元素的方法？</span><br><span class="line">答案：</span><br><span class="line">1、使用“console.log(数组名)”输出数组；2、利用for或for in语句循环输出数组；3、利用forEach()遍历数组，输出数组元素；4、利用map()遍历数组，输出数组元素。</span><br></pre></td></tr></table></figure><p><strong>方法1：直接利用console.log(数组名)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/374/314/958/1630567297409318.png" alt="1.png"></p><p><strong>方法2：利用for/for in循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/290/588/412/1630567420767090.png" alt="2.png"></p><p><strong>方法4：map()方遍历数组，循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=arr.<span class="title function_">map</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/192/435/414/1630567596204506.png" alt="4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript知识回顾</title>
      <link>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <guid>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;js回顾&quot;&gt;&lt;a href=&quot;#js回顾&quot; class=&quot;headerlink&quot; title=&quot;js回顾&quot;&gt;&lt;/a&gt;js回顾&lt;/h1&gt;&lt;h2 id=&quot;js类构造方法&quot;&gt;&lt;a href=&quot;#js类构造方法&quot; class=&quot;headerlink&quot; title=&quot;js类</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="js回顾"><a href="#js回顾" class="headerlink" title="js回顾"></a>js回顾</h1><h2 id="js类构造方法"><a href="#js类构造方法" class="headerlink" title="js类构造方法:"></a>js类构造方法:</h2><p>构造方法**<code>constructor</code>** 是一种用于创建和初始化<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class"><code>class</code></a>创建的对象的特殊方法</p><p>在一个类中只能有一个名为“constructor”的特殊方法。一个类中出现多次构造函数 (<code>constructor)</code>方法将会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError"><code>SyntaxError</code></a> 错误。</p><p>在一个构造方法中可以使用<code>super</code>关键字来调用一个父类的构造方法。</p><p>如果没有显式指定构造方法，则会添加默认的 constructor 方法。</p><p>如果不指定一个构造函数 (constructor) 方法，则使用一个默认的构造函数 (constructor)。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor">constructor链接</a></p><figure class="highlight plaintext"><figcaption><span>函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const add = (a,b) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于派生类，默认构造函数是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="js原型链："><a href="#js原型链：" class="headerlink" title="js原型链："></a>js原型链：</h2><p>构造函数 - 继承机制  </p><blockquote><p> JS通过<code>构造函数</code>来生成<code>实例</code>。但是又出现了一个新的问题，在<code>构造函数</code>中通过<code>this</code>赋值的属性或者方法，是每个实例的<code>实例属性</code>以及<code>实例方法</code>，无法共享公共属性。所以又设计出了一个<code>原型对象</code>，来存储这个<code>构造函数</code>的公共属性以及方法。</p></blockquote><blockquote><p> 我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p> 在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><p><a href="https://juejin.cn/post/6984678359275929637#heading-7">Js原型链</a></p><hr><h2 id="super："><a href="#super：" class="headerlink" title="super："></a><strong>super</strong>：</h2><ul><li><h5 id="this关键词指向函数所在的当前对象"><a href="#this关键词指向函数所在的当前对象" class="headerlink" title="this关键词指向函数所在的当前对象"></a>this关键词指向函数所在的当前对象</h5></li><li><h5 id="super指向的是当前对象的原型对象"><a href="#super指向的是当前对象的原型对象" class="headerlink" title="super指向的是当前对象的原型对象"></a>super指向的是当前对象的原型对象</h5></li></ul><blockquote><p> ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，<strong>方法内部的<code>this</code>指向当前的子类实例</strong></p></blockquote><p>Class中的 super()，它在这里表示父类的构造函数，用来新建父类的 this 对象</p><blockquote><p> 子类没有自己的this对象，而是继承父亲的this对象，然后进行加工。如果不调用super，子类就得不到this对象</p><p>ES5的继承，实质上是先创造子类的实例对象this，然后再将父类的方法添加到this上（Parent.call(this)）.<br>ES6的继承，需要先创建父类的this，子类调用super继承父类的this对象，然后再加工。</p><p>如果子类没有创建constructor，这个方法会被默认添加.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">             </span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">y</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Demo2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Demo</span>&#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">         <span class="variable language_">super</span>(x,y);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">x</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task1</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task2</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Demo2</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"> d.<span class="title function_">task1</span>()    <span class="comment">//[&quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br><span class="line"> d.<span class="title function_">task2</span>()    <span class="comment">//[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure><p><u>super 在静态方法之中指向父类，在普通方法之中指向父类的原型对象</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="title function_">myMethod</span>(<span class="number">1</span>); <span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">myMethod</span>(<span class="number">2</span>); <span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure><h2 id="ES6的箭头函数写法"><a href="#ES6的箭头函数写法" class="headerlink" title="ES6的箭头函数写法:"></a>ES6的<a href="https://so.csdn.net/so/search?q=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">箭头函数</a>写法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//经典格式： 函数名 = ( 参数 ) =&gt; &#123; 方法体 &#125; </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x,y</span>)=&gt;&#123; </span><br><span class="line">    <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum1</span> = (<span class="params">x,y</span>) =&gt; x+y;  </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum2</span> = x =&gt; &#123; 方法体 &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>* 箭头函数里是没有<strong>this</strong>的，只会向上一层寻找（可能是window）</li><li>* 箭头函数里是没有<strong>arguments</strong>的</li><li>* 箭头函数不能作为<strong>构造函数</strong></li><li>***** 箭头函数不能定义<strong>原型</strong>下的方法</li></ol></blockquote><h2 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h2><p>函数定义方式通常需要显式的指定函数名称，在代码执行前就被解释器加载到作用域中，这个特性可以让我们在函数定义之前就调用该函数。</p><p>既然提到函数声明，就要提到函数的作用域。<strong>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的，这意味着，变量在声明之前已经可用。</strong>这个特性可以被称为<strong>声明提前</strong>，即在函数体内声明的所有变量，在声明之前已经有定义，但只有在执行到这个变量时才会被真正赋值。</p><p>函数直接量表达式也是用到了关键字function。一般这种定义方式适用于将它作为一个大的表达式的一部分，比如在赋值和调用过程中定义函数。通过函数直接量生成的函数，函数名称可以省略，此时就是一个匿名函数。（匿名函数谨慎使用）</p><p><a href="https://blog.csdn.net/crazyorange_shen/article/details/68957987">js函数的三种定义方式</a></p><h2 id="JS数据结构和数据类型"><a href="#JS数据结构和数据类型" class="headerlink" title="JS数据结构和数据类型"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">JS数据结构和数据类型</a></h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Web%E5%89%8D%E7%AB%AF/">Web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/05/04/hello-world/</link>
      <guid>http://example.com/2021/05/04/hello-world/</guid>
      <pubDate>Tue, 04 May 2021 04:07:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/05/04/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
