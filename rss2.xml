<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>这波又白给</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>在天堂和地域之间，没有我选择的权利，只有别人选择我的命运！</description>
    <pubDate>Mon, 13 Mar 2023 12:18:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JavaScript输出</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript输出&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;JavaScript不提供任何内建的打印或显示函数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 显示方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Win</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><p><strong>JavaScript输出</strong></p><hr><p>JavaScript不提供任何内建的打印或显示函数。</p><hr><p><strong>JavaScript 显示方式</strong></p><ul><li>使用Window.alert( ) 写入警告框</li><li>使用document.write( )写入HTML输出</li><li>使用innerHTML 写入HTML元素</li><li>使用console.log()写入浏览器控制台</li></ul><p><strong>实例：</strong></p><ol><li><p>使用Window.alert( ) 写入警告框</p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/JS1.png" alt="JS1"></p></li></ol><p>2.使用document.write( )写入HTML输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(5 + 6)&quot;</span>&gt;</span>试一试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击前：</p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/js2-1.png" alt="js2-1"></p><p>点击后：</p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/js2-2.png" alt="js2-2"></p><p><strong>注意：</strong>在 HTML 文档完全加载后使用 <code>document.write()</code> 将<em>删除所有已有的 HTML</em></p><p><strong>提示：</strong><code>document.write()</code> 方法仅用于测试</p><p>3.使用innerHTML 写入HTML元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一张网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="number">5</span> + <span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/js3.png" alt="js3"></p><p><strong>提示：</strong>更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><p>4.使用console.log()写入浏览器控制台</p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/js4.png" alt="js4"></p><hr>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript第一天被提问的问题</title>
      <link>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</link>
      <guid>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;JavaScript学习笔记&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记&quot;&gt;&lt;/a&gt;JavaScript学习笔记&lt;/h1&gt;&lt;h6 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h6 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">JavaScript基本数据类型分为Null、Undefined、Boolean、Number、BigInt、String、2015年Symbol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavaScript 数据类型</span><br><span class="line">JavaScript 中有五种可包含值的数据类型：</span><br><span class="line"></span><br><span class="line">字符串（string）</span><br><span class="line">数字（number）</span><br><span class="line">布尔（boolean）</span><br><span class="line">对象（object）</span><br><span class="line">函数（function）</span><br><span class="line">有三种对象类型：</span><br><span class="line"></span><br><span class="line">对象（Object）</span><br><span class="line">日期（Date）</span><br><span class="line">数组（Array）</span><br><span class="line">同时有两种不能包含值的数据类型：</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line"> Null类型只有一个值Null</span><br><span class="line"> Undefined类型只有一个值Undefined</span><br><span class="line"> Boolean类型有两个值true、false</span><br><span class="line"> Number类型表示IEE754标准的双精度64位二进制格式的值(存储 2^-1074（Number.MIN_VALUE）和 2^1024（Number.MAX_VALUE）之</span><br><span class="line"> 的正浮点数，以及 -2^-1074 和 -2^1024 之间的负浮点数，但是它仅能安全地存储在 -(2^53 − 1)（Number.MIN_SAFE_INTEGER）     到2^53 − 1</span><br><span class="line"> BigInt类型在 Javascript 中是一个数字的原始值，它可以表示任意大小的整数。使用 BigInt，你可以安全地存储和操作巨大的整数，甚至   超过 Number 的安全整数限制</span><br><span class="line"> String类型表示文本数据</span><br><span class="line"> Symbol是唯一并且不可变的原始值并且可以用来作为对象属性的键（如下）。在某些程序语言当中，Symbol 也被称作“原子类型”（atom）。     symbol 的目的是去创建一个唯一属性键，保证不会与其他代码中的键产生冲突。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">问题：Js操作数组有哪几种方法？</span><br><span class="line">答案：</span><br><span class="line">length属性。主要用于获得数组内元素的个数，常用于for循环或一些判断语句中取得数组的长度。</span><br><span class="line">concat()方法。用于把两个或多个数组合并成一个数组，数组的索引会按照合并数组的顺序重新排序</span><br><span class="line">join()方法。主要用于将数组内的元素使用字符拼接成一个字符串，不传拼接字符参数，默认使用逗号。</span><br><span class="line">pop()方法。删除数组中最后一个元素，与之相反的方法是push()，向数组的末尾添加一个或多个元素。</span><br><span class="line">reverse()方法。这个方法主要用于反转数组元素，索引数组 reverse后会重新排序。</span><br><span class="line">slice()方法。用于从数组中提取所需要的元素，传入的参数是提取元素开始位置，例如slice(3)，则从下标为3的元素开始提取。</span><br><span class="line">splice()方法。splice()方法需要传入三个参数，第一个参数是索引开始的位置，第二个参数是删除元素的数量，第三个参数是在开始索引的位置插入的元素（可以为多个元素）。</span><br></pre></td></tr></table></figure><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\1.jpg" alt="1"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\2.webp" alt="2"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\3.webp" alt="3"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\4.webp" alt="4"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\5.webp" alt="5"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\6.webp" alt="6"></p><p><img src="/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/Users\ASUS\Documents\Markdown笔记\JavaScript学习笔记\img\7.webp" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题3：Js输出一个数组内所有元素的方法？</span><br><span class="line">答案：</span><br><span class="line">1、使用“console.log(数组名)”输出数组；2、利用for或for in语句循环输出数组；3、利用forEach()遍历数组，输出数组元素；4、利用map()遍历数组，输出数组元素。</span><br></pre></td></tr></table></figure><p><strong>方法1：直接利用console.log(数组名)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/374/314/958/1630567297409318.png" alt="1.png"></p><p><strong>方法2：利用for/for in循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/290/588/412/1630567420767090.png" alt="2.png"></p><p><strong>方法4：map()方遍历数组，循环输出数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a=arr.<span class="title function_">map</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://img.php.cn/upload/image/192/435/414/1630567596204506.png" alt="4.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(01-%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%8F%90%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript原型链</title>
      <link>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</link>
      <guid>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;JavaScript原型链&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要搞清楚原型链，我们首先了解什么是&lt;code&gt;原型&lt;/code&gt;？每个函数都有&lt;code&gt;prototype&lt;/code&gt;属性，我们称之为&lt;code&gt;原型&lt;/code&gt;,又</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>JavaScript原型链</strong></p><blockquote><p>要搞清楚原型链，我们首先了解什么是<code>原型</code>？每个函数都有<code>prototype</code>属性，我们称之为<code>原型</code>,又因为这个属性的值是一个对象，所以我们也称为<code>原型对象</code>。</p><p>那么什么是<code>对象</code>呢？</p><p>这里我们要了解在JavaScript中对象是一种引用数据类型。我们可以通过很多种方式来创建一个对象。我们常用构造函数的方式来创建一个对象：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成实列</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;小明&#x27;</span>，<span class="number">16</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>  那么，函数与对象的关系是怎么样的呢？</p><ul><li>函数是对象，对象都是通过函数创建的。</li><li>函数与对象并不是简单的包含与被包含的关系。</li></ul></blockquote><blockquote><p>在我们上面创建的对象中，通过定义常量实例化后，在原来<code>构造函数</code>中通过<code>this</code>赋值的方法或者属性，已经在实例化后成为了每个实例的<code>实例属性</code>和<code>实例方法</code>，无法共享公共属性和方法。所以设计出了一个<code>原型对象</code>，来存储这个构造函数的公共属性及方法。</p></blockquote><blockquote><p>我们再下面一段代码了加深一下理解：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age,sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line"><span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法 打印：张三说：hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到我们实例对象实例<code>p1</code>调用到<code>Person</code>这个<code>构造函数</code>的<code>原型对象</code>上的say()方法。但是为什么呢？明明只有在<code>构造函数</code>内部通过<code>this</code>来赋值的属性或者方法才会被实例所继承，为什么在<code>构造函数</code>的<code>原型对象</code>上定义的<code>say</code>方法也能通过实例来调用到呢？这里就引出了<code>原型链</code>这个概念。</p></blockquote><blockquote><p>实际上<code>原型对象</code>中存在的<code>构造函数</code>指向了我们function创建的对象。并且每个对象都有一个<code>__proto__</code>属性，这个属性会指向<code>实例对象</code>的<code>构造函数</code>的<code>原型对象</code>，这样使得彼此之间存在一定的指向关系，能够使每个<code>实列化对象</code>能够使用<code>构造函数</code>的<code>原型对象</code>的方法。</p></blockquote><blockquote><p>而这种指向关系，我们就称之为原型链。图解如下：</p></blockquote><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/.%5Cimg%5Cyxl.png" alt="yxl"></p><p>​            </p><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/11.png" alt="11"></p><blockquote><p>我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p>在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发中需注意点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Preson</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 所有实例共享的公共方法</span></span><br><span class="line">    <span class="title class_">Preson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>说：<span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>); <span class="comment">// 创建一个Person实例对象</span></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Preson</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>); <span class="comment">// 新创建一个Proson实例对象</span></span><br><span class="line">    p1.<span class="title function_">say</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 调用公共方法</span></span><br><span class="line">    p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;say&#x27;</span>) <span class="comment">// false 说明不是定义在其本身上的</span></span><br><span class="line">    p1.<span class="property">__proto__</span>.<span class="property">do</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;往原型对象中添加方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p2.<span class="title function_">do</span>(); <span class="comment">// 打印出了-往原型对象中添加方法</span></span><br></pre></td></tr></table></figure><hr><p><strong>原型链的尽头</strong></p><hr><blockquote><p>我们可以看到，<code>实例对象</code>的<code>__proto__</code>属性指向了一个<code>构造函数</code>的<code>原型对象</code>，该<code>构造函数的原型对象</code>的<code>_proto_</code>属性指向了<code>Object</code>的<code>原型对象</code>，而其<code>Object的原型对象</code>的<code>_proto_</code>属性指向了null，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><p><img src="/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/12.png" alt="11"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/JavaScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript知识回顾</title>
      <link>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <guid>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      <pubDate>Tue, 04 May 2021 04:57:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;js回顾&quot;&gt;&lt;a href=&quot;#js回顾&quot; class=&quot;headerlink&quot; title=&quot;js回顾&quot;&gt;&lt;/a&gt;js回顾&lt;/h1&gt;&lt;h2 id=&quot;js类构造方法&quot;&gt;&lt;a href=&quot;#js类构造方法&quot; class=&quot;headerlink&quot; title=&quot;js类</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="js回顾"><a href="#js回顾" class="headerlink" title="js回顾"></a>js回顾</h1><h2 id="js类构造方法"><a href="#js类构造方法" class="headerlink" title="js类构造方法:"></a>js类构造方法:</h2><p>构造方法**<code>constructor</code>** 是一种用于创建和初始化<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class"><code>class</code></a>创建的对象的特殊方法</p><p>在一个类中只能有一个名为“constructor”的特殊方法。一个类中出现多次构造函数 (<code>constructor)</code>方法将会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError"><code>SyntaxError</code></a> 错误。</p><p>在一个构造方法中可以使用<code>super</code>关键字来调用一个父类的构造方法。</p><p>如果没有显式指定构造方法，则会添加默认的 constructor 方法。</p><p>如果不指定一个构造函数 (constructor) 方法，则使用一个默认的构造函数 (constructor)。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor">constructor链接</a></p><figure class="highlight plaintext"><figcaption><span>函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const add = (a,b) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于派生类，默认构造函数是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(...args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="js原型链："><a href="#js原型链：" class="headerlink" title="js原型链："></a>js原型链：</h2><p>构造函数 - 继承机制  </p><blockquote><p> JS通过<code>构造函数</code>来生成<code>实例</code>。但是又出现了一个新的问题，在<code>构造函数</code>中通过<code>this</code>赋值的属性或者方法，是每个实例的<code>实例属性</code>以及<code>实例方法</code>，无法共享公共属性。所以又设计出了一个<code>原型对象</code>，来存储这个<code>构造函数</code>的公共属性以及方法。</p></blockquote><blockquote><p> 我们可以看到，它的<code>__proto__</code>属性指向了一个<code>function Function</code>的<code>原型对象</code>，该<code>原型对象</code>为JS中所有函数的<code>原型对象</code>，而其<code>__proto__</code>属性也还是指向了<code>function Object</code>的<code>原型对象</code>，所以验证了<code>原型链</code>的尽头为<code>null</code>，这一说法。</p></blockquote><blockquote><p> 在开发的时候，要注意不要通过<code>实例对象</code>去改变其<code>构造函数</code>的<code>原型对象</code>，这样会对其他通过该<code>构造函数</code>生成的<code>实例对象</code>造成影响。</p></blockquote><p><a href="https://juejin.cn/post/6984678359275929637#heading-7">Js原型链</a></p><hr><h2 id="super："><a href="#super：" class="headerlink" title="super："></a><strong>super</strong>：</h2><ul><li><h5 id="this关键词指向函数所在的当前对象"><a href="#this关键词指向函数所在的当前对象" class="headerlink" title="this关键词指向函数所在的当前对象"></a>this关键词指向函数所在的当前对象</h5></li><li><h5 id="super指向的是当前对象的原型对象"><a href="#super指向的是当前对象的原型对象" class="headerlink" title="super指向的是当前对象的原型对象"></a>super指向的是当前对象的原型对象</h5></li></ul><blockquote><p> ES6 规定，在子类普通方法中通过<code>super</code>调用父类的方法时，<strong>方法内部的<code>this</code>指向当前的子类实例</strong></p></blockquote><p>Class中的 super()，它在这里表示父类的构造函数，用来新建父类的 this 对象</p><blockquote><p> 子类没有自己的this对象，而是继承父亲的this对象，然后进行加工。如果不调用super，子类就得不到this对象</p><p>ES5的继承，实质上是先创造子类的实例对象this，然后再将父类的方法添加到this上（Parent.call(this)）.<br>ES6的继承，需要先创建父类的this，子类调用super继承父类的this对象，然后再加工。</p><p>如果子类没有创建constructor，这个方法会被默认添加.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">             </span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">y</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Demo2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Demo</span>&#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">         <span class="variable language_">super</span>(x,y);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">customSplit</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">x</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task1</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="title function_">task2</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">customSplit</span>();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Demo2</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"> d.<span class="title function_">task1</span>()    <span class="comment">//[&quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;]</span></span><br><span class="line"> d.<span class="title function_">task2</span>()    <span class="comment">//[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure><p><u>super 在静态方法之中指向父类，在普通方法之中指向父类的原型对象</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="title function_">myMethod</span>(<span class="number">1</span>); <span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">myMethod</span>(<span class="number">2</span>); <span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure><h2 id="ES6的箭头函数写法"><a href="#ES6的箭头函数写法" class="headerlink" title="ES6的箭头函数写法:"></a>ES6的<a href="https://so.csdn.net/so/search?q=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">箭头函数</a>写法:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//经典格式： 函数名 = ( 参数 ) =&gt; &#123; 方法体 &#125; </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x,y</span>)=&gt;&#123; </span><br><span class="line">    <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum1</span> = (<span class="params">x,y</span>) =&gt; x+y;  </span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum1) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum2</span> = x =&gt; &#123; 方法体 &#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>* 箭头函数里是没有<strong>this</strong>的，只会向上一层寻找（可能是window）</li><li>* 箭头函数里是没有<strong>arguments</strong>的</li><li>* 箭头函数不能作为<strong>构造函数</strong></li><li>***** 箭头函数不能定义<strong>原型</strong>下的方法</li></ol></blockquote><h2 id="函数作用域："><a href="#函数作用域：" class="headerlink" title="函数作用域："></a>函数作用域：</h2><p>函数定义方式通常需要显式的指定函数名称，在代码执行前就被解释器加载到作用域中，这个特性可以让我们在函数定义之前就调用该函数。</p><p>既然提到函数声明，就要提到函数的作用域。<strong>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的，这意味着，变量在声明之前已经可用。</strong>这个特性可以被称为<strong>声明提前</strong>，即在函数体内声明的所有变量，在声明之前已经有定义，但只有在执行到这个变量时才会被真正赋值。</p><p>函数直接量表达式也是用到了关键字function。一般这种定义方式适用于将它作为一个大的表达式的一部分，比如在赋值和调用过程中定义函数。通过函数直接量生成的函数，函数名称可以省略，此时就是一个匿名函数。（匿名函数谨慎使用）</p><p><a href="https://blog.csdn.net/crazyorange_shen/article/details/68957987">js函数的三种定义方式</a></p><h2 id="JS数据结构和数据类型"><a href="#JS数据结构和数据类型" class="headerlink" title="JS数据结构和数据类型"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">JS数据结构和数据类型</a></h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/web%E5%89%8D%E7%AB%AF/">web前端</category>
      
      
      <category domain="http://example.com/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://example.com/2021/05/04/%E7%AC%AC%E4%B8%80%E8%AF%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/05/04/hello-world/</link>
      <guid>http://example.com/2021/05/04/hello-world/</guid>
      <pubDate>Tue, 04 May 2021 04:07:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/05/04/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
